(** val negb : bool -> bool **)

let negb = function
| true -> false
| false -> true

type 'a option =
| Some of 'a
| None

type ('a, 'b) prod =
| Pair of 'a * 'b

(** val fst : ('a1, 'a2) prod -> 'a1 **)

let fst = function
| Pair (x, _) -> x

(** val snd : ('a1, 'a2) prod -> 'a2 **)

let snd = function
| Pair (_, y) -> y

(** val length : 'a1 list -> int **)

let rec length = ( List.length )

(** val app : 'a1 list -> 'a1 list -> 'a1 list **)

let rec app l m =
  match l with
  | [] -> m
  | a::l1 -> a::(app l1 m)

(** val pred : int -> int **)

let pred n0 =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    n0)
    (fun u ->
    u)
    n0

module Coq__1 = struct
 (** val add : int -> int -> int **)let rec add = ( + )
end
let add = Coq__1.add


(** val mul : int -> int -> int **)

let rec mul = ( * )

(** val max : int -> int -> int **)

let rec max n0 m =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    m)
    (fun n' ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ ->
      n0)
      (fun m' -> (fun x -> x + 1)
      (max n' m'))
      m)
    n0

(** val min : int -> int -> int **)

let rec min n0 m =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    0)
    (fun n' ->
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ ->
      0)
      (fun m' -> (fun x -> x + 1)
      (min n' m'))
      m)
    n0

(** val eqb : bool -> bool -> bool **)

let eqb b1 b2 =
  if b1 then b2 else if b2 then false else true

module Nat =
 struct
  (** val eqb : int -> int -> bool **)

  let rec eqb = ( fun (a:int) (b:int) -> a=b )
 end

type positive =
| XI of positive
| XO of positive
| XH

type n =
| N0
| Npos of positive

module Pos =
 struct
  (** val succ : positive -> positive **)

  let rec succ = function
  | XI p -> XO (succ p)
  | XO p -> XI p
  | XH -> XO XH

  (** val add : positive -> positive -> positive **)

  let rec add x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> XO (add_carry p q)
       | XO q -> XI (add p q)
       | XH -> XO (succ p))
    | XO p ->
      (match y with
       | XI q -> XI (add p q)
       | XO q -> XO (add p q)
       | XH -> XI p)
    | XH ->
      (match y with
       | XI q -> XO (succ q)
       | XO q -> XI q
       | XH -> XO XH)

  (** val add_carry : positive -> positive -> positive **)

  and add_carry x y =
    match x with
    | XI p ->
      (match y with
       | XI q -> XI (add_carry p q)
       | XO q -> XO (add_carry p q)
       | XH -> XI (succ p))
    | XO p ->
      (match y with
       | XI q -> XO (add_carry p q)
       | XO q -> XI (add p q)
       | XH -> XO (succ p))
    | XH ->
      (match y with
       | XI q -> XI (succ q)
       | XO q -> XO (succ q)
       | XH -> XI XH)

  (** val mul : positive -> positive -> positive **)

  let rec mul x y =
    match x with
    | XI p -> add y (XO (mul p y))
    | XO p -> XO (mul p y)
    | XH -> y

  (** val iter_op : ('a1 -> 'a1 -> 'a1) -> positive -> 'a1 -> 'a1 **)

  let rec iter_op op p a =
    match p with
    | XI p0 -> op a (iter_op op p0 (op a a))
    | XO p0 -> iter_op op p0 (op a a)
    | XH -> a

  (** val to_nat : positive -> int **)

  let to_nat x =
    iter_op Coq__1.add x ((fun x -> x + 1) 0)

  (** val of_succ_nat : int -> positive **)

  let rec of_succ_nat n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ ->
      XH)
      (fun x ->
      succ (of_succ_nat x))
      n0
 end

module N =
 struct
  (** val add : n -> n -> n **)

  let add n0 m =
    match n0 with
    | N0 -> m
    | Npos p ->
      (match m with
       | N0 -> n0
       | Npos q -> Npos (Pos.add p q))

  (** val mul : n -> n -> n **)

  let mul n0 m =
    match n0 with
    | N0 -> N0
    | Npos p ->
      (match m with
       | N0 -> N0
       | Npos q -> Npos (Pos.mul p q))

  (** val to_nat : n -> int **)

  let to_nat = function
  | N0 -> 0
  | Npos p -> Pos.to_nat p

  (** val of_nat : int -> n **)

  let of_nat n0 =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ ->
      N0)
      (fun n' -> Npos
      (Pos.of_succ_nat n'))
      n0
 end

(** val rev_append : 'a1 list -> 'a1 list -> 'a1 list **)

let rec rev_append l l' =
  match l with
  | [] -> l'
  | a::l0 -> rev_append l0 (a::l')

(** val rev' : 'a1 list -> 'a1 list **)

let rev' l =
  rev_append l []

(** val fold_left : ('a1 -> 'a2 -> 'a1) -> 'a2 list -> 'a1 -> 'a1 **)

let rec fold_left f l a0 =
  match l with
  | [] -> a0
  | b::t -> fold_left f t (f a0 b)

(** val existsb : ('a1 -> bool) -> 'a1 list -> bool **)

let rec existsb f = function
| [] -> false
| a::l0 -> if f a then true else existsb f l0

(** val filter : ('a1 -> bool) -> 'a1 list -> 'a1 list **)

let rec filter f = function
| [] -> []
| x::l0 -> if f x then x::(filter f l0) else filter f l0

(** val find : ('a1 -> bool) -> 'a1 list -> 'a1 option **)

let rec find f = function
| [] -> None
| x::tl -> if f x then Some x else find f tl

(** val zero : char **)

let zero =
  '\000'

(** val one : char **)

let one =
  '\001'

(** val shift : bool -> char -> char **)

let shift c a =
  (* If this appears, you're using Ascii internals. Please don't *) (fun f c -> let n = Char.code c in let h i = (n land (1 lsl i)) <> 0 in f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))
    (fun a1 a2 a3 a4 a5 a6 a7 _ ->
    (* If this appears, you're using Ascii internals. Please don't *) (fun (b0,b1,b2,b3,b4,b5,b6,b7) -> let f b i = if b then 1 lsl i else 0 in Char.chr (f b0 0 + f b1 1 + f b2 2 + f b3 3 + f b4 4 + f b5 5 + f b6 6 + f b7 7))
    (c, a1, a2, a3, a4, a5, a6,
    a7))
    a

(** val ascii_of_pos : positive -> char **)

let ascii_of_pos =
  let rec loop n0 p =
    (fun fO fS n -> if n=0 then fO () else fS (n-1))
      (fun _ ->
      zero)
      (fun n' ->
      match p with
      | XI p' -> shift true (loop n' p')
      | XO p' -> shift false (loop n' p')
      | XH -> one)
      n0
  in loop ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))

(** val ascii_of_N : n -> char **)

let ascii_of_N = function
| N0 -> zero
| Npos p -> ascii_of_pos p

(** val ascii_of_nat : int -> char **)

let ascii_of_nat a =
  ascii_of_N (N.of_nat a)

(** val append : string -> string -> string **)

let rec append = ( ^ )

(** val tab : string **)

let tab =
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ((ascii_of_nat ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))))))))), (String.make 0 ' '))

(** val newline : string **)

let newline =
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ((ascii_of_nat ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))))),
    (String.make 0 ' '))

(** val quote : string **)

let quote =
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ((ascii_of_nat ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       0))))))))))))))))))))))))))))))))))), (String.make 0 ' '))

(** val stringOfNat : int -> string **)

let stringOfNat = ( fun (a:int) -> string_of_int a )

(** val stringOf : string list -> string **)

let stringOf l =
  fold_left append l (String.make 0 ' ')

(** val beq_string : string -> string -> bool **)

let rec beq_string = ( fun (a:string) (b:string) -> a=b )

(** val string_prefix : string -> string -> bool **)

let rec string_prefix = ( fun (a:string) (b:string) ->
  try
    a = String.sub b 0 (String.length a)
  with
    Invalid_argument _ -> false
  )

(** val substr : int -> string -> string **)

let rec substr = ( fun (n:int) (s:string) -> String.sub s n (String.length s - 4) )

(** val find_string : string -> string list -> bool **)

let rec find_string s = function
| [] -> false
| h::_ -> beq_string s h

(** val printFlag : int -> bool **)

let printFlag = ( BackendLinux.printFlag )

(** val printf : 'a1 -> string -> 'a1 **)

let printf = ( BackendLinux.printf )

(** val printfFlush : 'a1 -> string -> 'a1 **)

let printfFlush = ( BackendLinux.printfFlush )

(** val printlnFlush : 'a1 -> string list -> 'a1 **)

let printlnFlush x l =
  printfFlush x (stringOf (app l (newline::[])))

(** val println : 'a1 -> string list -> 'a1 **)

let println x l =
  printf x (stringOf (app l (newline::[])))

(** val comment : 'a1 -> string list -> 'a1 **)

let comment x l =
  println x (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))::l)

(** val commentFlush : 'a1 -> string list -> 'a1 **)

let commentFlush x l =
  printlnFlush x (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))::l)

(** val warning : 'a1 -> string list -> 'a1 **)

let warning x ss =
  printfFlush x
    (stringOf
      (app (newline::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        ('W', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('G',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        (String.make 0 ' ')))))))))))))))))))::ss)) (newline::(newline::[]))))

(** val macroExpansionDepth : int **)

let macroExpansionDepth = ( 100000 )

(** val timeForStatusUpdate : int -> bool **)

let timeForStatusUpdate = ( BackendLinux.timeForStatusUpdate )

(** val blt_nat : int -> int -> bool **)

let blt_nat = ( fun (a:int) (b:int) -> a < b )

(** val rangeHelper : int -> int list -> int list **)

let rec rangeHelper n0 l =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    l)
    (fun n' ->
    rangeHelper n' (n'::l))
    n0

(** val range : int -> int list **)

let range n0 =
  rangeHelper n0 []

(** val mapHelper : ('a1 -> 'a2) -> 'a1 list -> 'a2 list -> 'a2 list **)

let rec mapHelper f l l' =
  match l with
  | [] -> rev' l'
  | h::t -> mapHelper f t ((f h)::l')

(** val map : ('a1 -> 'a2) -> 'a1 list -> 'a2 list **)

let map f l =
  mapHelper f l []

(** val app_rev : 'a1 list -> 'a1 list -> 'a1 list **)

let rec app_rev a = function
| [] -> a
| h::t -> app_rev (h::a) t

(** val app_tail : 'a1 list -> 'a1 list -> 'a1 list **)

let app_tail a b =
  app_rev b (rev' a)

(** val removeb_helper : ('a1 -> bool) -> 'a1 list -> 'a1 list -> 'a1 list **)

let rec removeb_helper f l1 l2 =
  match l1 with
  | [] -> l2
  | x::tl -> if f x then removeb_helper f tl l2 else removeb_helper f tl (x::l2)

(** val removeb : ('a1 -> bool) -> 'a1 list -> 'a1 list **)

let removeb f l =
  removeb_helper f (rev' l) []

type instID = int

type threadID = int

type intraInstructionID = int

type virtualTag = int

(** val beq_vtag : int -> int -> bool **)

let beq_vtag =
  Nat.eqb

type physicalTag =
| PTag of int
| PTETag of virtualTag
| APICTag of string * int

(** val beq_ptag : physicalTag -> physicalTag -> bool **)

let beq_ptag a b =
  match a with
  | PTag a1 ->
    (match b with
     | PTag b1 -> Nat.eqb a1 b1
     | _ -> false)
  | PTETag a1 ->
    (match b with
     | PTETag b1 -> Nat.eqb a1 b1
     | _ -> false)
  | APICTag (a1, a2) ->
    (match b with
     | APICTag (b1, b2) -> if beq_string a1 b1 then Nat.eqb a2 b2 else false
     | _ -> false)

type index = int

type virtualAddress = { vtag : virtualTag; vindex : index }

(** val beq_vaddr : virtualAddress -> virtualAddress -> bool **)

let beq_vaddr a b =
  let { vtag = a1; vindex = a2 } = a in
  let { vtag = b1; vindex = b2 } = b in if Nat.eqb a1 b1 then Nat.eqb a2 b2 else false

type physicalAddress = { ptag : physicalTag; pindex : index }

(** val beq_paddr : physicalAddress -> physicalAddress -> bool **)

let beq_paddr a b =
  let { ptag = a1; pindex = a2 } = a in
  let { ptag = b1; pindex = b2 } = b in if beq_ptag a1 b1 then Nat.eqb a2 b2 else false

type pTEStatus = { accessed : bool; dirty : bool }

(** val accessed : pTEStatus -> bool **)

let accessed x = x.accessed

(** val dirty : pTEStatus -> bool **)

let dirty x = x.dirty

(** val beq_pte_status : pTEStatus -> pTEStatus -> bool **)

let beq_pte_status a b =
  let { accessed = a1; dirty = a2 } = a in
  let { accessed = b1; dirty = b2 } = b in if eqb a1 b1 then eqb a2 b2 else false

type accessedStatus =
| Accessed
| NotAccessed
| AccessedDontCare

(** val stringOfAccessedStatus : accessedStatus -> string **)

let stringOfAccessedStatus = function
| Accessed ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    (String.make 0 ' '))))))
| NotAccessed ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    (String.make 0 ' '))))))))
| AccessedDontCare ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('?',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    (String.make 0 ' '))))))))

type dirtyStatus =
| Dirty
| NotDirty
| DirtyDontCare

(** val stringOfDirtyStatus : dirtyStatus -> string **)

let stringOfDirtyStatus = function
| Dirty ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    (String.make 0 ' '))))))))))
| NotDirty ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    (String.make 0 ' '))))))))))))
| DirtyDontCare ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('?',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    (String.make 0 ' '))))))))))))

(** val match_pte_status : pTEStatus -> accessedStatus -> dirtyStatus -> bool **)

let match_pte_status s a d =
  let p = Pair ((Pair (s.accessed, a)), s.dirty) in
  let Pair (p0, b) = p in
  let Pair (b0, a0) = p0 in
  if b0
  then (match a0 with
        | NotAccessed -> false
        | _ ->
          if b
          then (match d with
                | NotDirty -> false
                | _ -> true)
          else (match d with
                | Dirty -> false
                | _ -> true))
  else (match a0 with
        | Accessed -> false
        | _ ->
          if b
          then (match d with
                | NotDirty -> false
                | _ -> true)
          else (match d with
                | Dirty -> false
                | _ -> true))

(** val stringOfPTEStatus : pTEStatus -> string **)

let stringOfPTEStatus s =
  let { accessed = a; dirty = d } = s in
  stringOf
    ((if a
      then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
             (String.make 0 ' '))))
      else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
             (String.make 0 ' ')))))))::((if d
                                          then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                 ('d', (String.make 0 ' '))
                                          else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                 ('n',
                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                 ('d', (String.make 0 ' ')))))::[]))

type data =
| UnknownData
| NormalData of int
| PageTableEntry of virtualTag * physicalTag * pTEStatus
| OtherData of string * int

(** val beq_pte : data -> virtualTag -> physicalTag -> accessedStatus -> dirtyStatus -> bool **)

let beq_pte e v p a d =
  match e with
  | PageTableEntry (v', p', s') ->
    if if beq_vtag v v' then beq_ptag p p' else false then match_pte_status s' a d else false
  | _ -> false

(** val beq_data : data -> data -> bool **)

let beq_data a b =
  match a with
  | UnknownData -> false
  | NormalData a' ->
    (match b with
     | NormalData b' -> Nat.eqb a' b'
     | _ -> false)
  | PageTableEntry (a1, a2, a3) ->
    (match b with
     | PageTableEntry (b1, b2, b3) ->
       if if Nat.eqb a1 b1 then beq_ptag a2 b2 else false then beq_pte_status a3 b3 else false
     | _ -> false)
  | OtherData (a1, a2) ->
    (match b with
     | OtherData (b1, b2) -> if beq_string a1 b1 then Nat.eqb a2 b2 else false
     | _ -> false)

type boundaryCondition = (physicalAddress, data) prod

type memoryAccess =
| Read of string list * virtualAddress * physicalAddress * data
| Write of string list * virtualAddress * physicalAddress * data
| Fence of string list
| FenceVA of string list * virtualAddress

type microop = { globalID : instID; coreID : int; threadID0 : threadID; intraInstructionID0 : intraInstructionID;
                 access : memoryAccess }

(** val globalID : microop -> instID **)

let globalID x = x.globalID

(** val coreID : microop -> int **)

let coreID x = x.coreID

(** val threadID0 : microop -> threadID **)

let threadID0 x = x.threadID0

(** val intraInstructionID0 : microop -> intraInstructionID **)

let intraInstructionID0 x = x.intraInstructionID0

(** val access : microop -> memoryAccess **)

let access x = x.access

(** val getAccessType : microop -> string list **)

let getAccessType uop =
  let { globalID = _; coreID = _; threadID0 = _; intraInstructionID0 = _; access = access0 } = uop in
  (match access0 with
   | Read (t, _, _, _) -> t
   | Write (t, _, _, _) -> t
   | Fence t -> t
   | FenceVA (t, _) -> t)

(** val getVirtualAddress : microop -> virtualAddress option **)

let getVirtualAddress uop =
  let { globalID = _; coreID = _; threadID0 = _; intraInstructionID0 = _; access = access0 } = uop in
  (match access0 with
   | Read (_, a, _, _) -> Some a
   | Write (_, a, _, _) -> Some a
   | Fence _ -> None
   | FenceVA (_, a) -> Some a)

(** val getVirtualTag : microop -> virtualTag option **)

let getVirtualTag uop =
  match getVirtualAddress uop with
  | Some v -> let { vtag = t; vindex = _ } = v in Some t
  | None -> None

(** val getIndex : microop -> index option **)

let getIndex uop =
  match getVirtualAddress uop with
  | Some v -> let { vtag = _; vindex = i } = v in Some i
  | None -> None

(** val getPhysicalAddress : microop -> physicalAddress option **)

let getPhysicalAddress uop =
  let { globalID = _; coreID = _; threadID0 = _; intraInstructionID0 = _; access = access0 } = uop in
  (match access0 with
   | Read (_, _, a, _) -> Some a
   | Write (_, _, a, _) -> Some a
   | _ -> None)

(** val getPhysicalTag : microop -> physicalTag option **)

let getPhysicalTag uop =
  match getPhysicalAddress uop with
  | Some p -> let { ptag = t; pindex = _ } = p in Some t
  | None -> None

(** val getData : microop -> data option **)

let getData uop =
  let { globalID = _; coreID = _; threadID0 = _; intraInstructionID0 = _; access = access0 } = uop in
  (match access0 with
   | Read (_, _, _, d) -> Some d
   | Write (_, _, _, d) -> Some d
   | _ -> None)

(** val sameVirtualAddress : microop -> microop -> bool **)

let sameVirtualAddress x y =
  let o = getVirtualAddress x in
  let o0 = getVirtualAddress y in
  (match o with
   | Some ax ->
     (match o0 with
      | Some ay -> beq_vaddr ax ay
      | None -> false)
   | None -> false)

(** val sameVirtualTag : microop -> microop -> bool **)

let sameVirtualTag x y =
  let o = getVirtualTag x in
  let o0 = getVirtualTag y in
  (match o with
   | Some ax ->
     (match o0 with
      | Some ay -> beq_vtag ax ay
      | None -> false)
   | None -> false)

(** val samePhysicalAddress : microop -> microop -> bool **)

let samePhysicalAddress x y =
  let o = getPhysicalAddress x in
  let o0 = getPhysicalAddress y in
  (match o with
   | Some ax ->
     (match o0 with
      | Some ay -> beq_paddr ax ay
      | None -> false)
   | None -> false)

(** val samePhysicalTag : microop -> microop -> bool **)

let samePhysicalTag x y =
  let o = getPhysicalTag x in
  let o0 = getPhysicalTag y in
  (match o with
   | Some ax ->
     (match o0 with
      | Some ay -> beq_ptag ax ay
      | None -> false)
   | None -> false)

(** val sameIndex : microop -> microop -> bool **)

let sameIndex x y =
  let o = getIndex x in
  let o0 = getIndex y in
  (match o with
   | Some ax ->
     (match o0 with
      | Some ay -> Nat.eqb ax ay
      | None -> false)
   | None -> false)

(** val sameData : microop -> microop -> bool **)

let sameData x y =
  let o = getData x in
  let o0 = getData y in
  (match o with
   | Some ax ->
     (match o0 with
      | Some ay -> beq_data ax ay
      | None -> false)
   | None -> false)

(** val beq_uop : microop -> microop -> bool **)

let beq_uop a b =
  if Nat.eqb a.globalID b.globalID then Nat.eqb a.intraInstructionID0 b.intraInstructionID0 else false

type thread = microop list

type program = thread list

(** val vAPASameTagAndIndex : virtualAddress -> physicalAddress -> bool **)

let vAPASameTagAndIndex v p =
  let { vtag = vt; vindex = vi } = v in
  let { ptag = ptag0; pindex = pi } = p in
  (match ptag0 with
   | PTag pt -> if Nat.eqb vt pt then Nat.eqb vi pi else false
   | _ -> false)

type location = (int, int) prod

type graphNode = (microop, location) prod

type graphEdge = (((graphNode, graphNode) prod, string) prod, string) prod

(** val beq_node : graphNode -> graphNode -> bool **)

let beq_node a b =
  let Pair (i0, l) = a in
  let Pair (p0, l0) = l in
  let Pair (i1, l1) = b in
  let Pair (p1, l2) = l1 in
  if if Nat.eqb i0.globalID i1.globalID then Nat.eqb i0.intraInstructionID0 i1.intraInstructionID0 else false
  then if Nat.eqb p0 p1 then Nat.eqb l0 l2 else false
  else false

(** val beq_edge : graphEdge -> graphEdge -> bool **)

let beq_edge a b =
  let Pair (p, _) = a in
  let Pair (p0, _) = p in
  let Pair (a1, a2) = p0 in
  let Pair (p1, _) = b in
  let Pair (p2, _) = p1 in let Pair (b1, b2) = p2 in if beq_node a1 b1 then beq_node a2 b2 else false

(** val knownAddresses : (int, string) prod list **)

let knownAddresses =
  (Pair (0, ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    (String.make 0 ' ')))))::((Pair (((fun x -> x + 1) 0),
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    (String.make 0 ' ')))))::((Pair (((fun x -> x + 1) ((fun x -> x + 1) 0)),
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('z',
    (String.make 0 ' ')))))::((Pair (((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))),
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('w',
    (String.make 0 ' ')))))::[])))

(** val addressString : (int, string) prod list -> int -> string **)

let rec addressString l a =
  match l with
  | [] ->
    stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      (String.make 0 ' ')))))))))::((stringOfNat a)::[]))
  | p::t -> let Pair (h1, h2) = p in if Nat.eqb h1 a then h2 else addressString t a

(** val graphvizStringOfVirtualAddress : virtualAddress -> string **)

let graphvizStringOfVirtualAddress a =
  let { vtag = t; vindex = i } = a in
  stringOf
    ((addressString knownAddresses t)::((if Nat.eqb 0 i
                                         then (String.make 0 ' ')
                                         else stringOf
                                                (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                ('.', (String.make 0 ' ')))::((stringOfNat i)::[])))::[]))

(** val graphvizStringOfPhysicalTag : physicalTag -> string **)

let graphvizStringOfPhysicalTag = function
| PTag t' -> stringOfNat t'
| PTETag t' ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    (String.make 0 ' ')))))))))))))::((stringOfNat t')::[]))
| APICTag (s, t') ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
    (String.make 0 ' ')))))))))))))))))::(s::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_', (String.make 0 ' ')))::((stringOfNat t')::[]))))

(** val graphvizStringOfPhysicalAddress : physicalAddress -> string **)

let graphvizStringOfPhysicalAddress a =
  let { ptag = t; pindex = i } = a in
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    (String.make 0 ' ')))))::((graphvizStringOfPhysicalTag t)::((stringOfNat i)::[])))

(** val graphvizStringOfData : data -> string **)

let graphvizStringOfData = function
| UnknownData ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('k',
    (String.make 0 ' '))))))
| NormalData n0 -> stringOfNat n0
| PageTableEntry (v, p, s) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
    (String.make 0 ' ')))))))))::((stringOfNat v)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_',
    (String.make 0 ' ')))::((graphvizStringOfPhysicalTag p)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_', (String.make 0 ' ')))::((stringOfPTEStatus s)::[]))))))
| OtherData (t, n0) ->
  stringOf (t::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
    (String.make 0 ' ')))::((stringOfNat n0)::[])))

(** val graphvizStringOfMemoryAccess : string -> memoryAccess -> string **)

let graphvizStringOfMemoryAccess divider = function
| Read (t, v, p, d) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    (String.make 0 ' ')))))))))::(divider::((fold_left (fun a0 b -> stringOf (a0::(b::(divider::[])))) t
                                              (String.make 0 ' '))::((graphvizStringOfVirtualAddress v)::(divider::((
    if vAPASameTagAndIndex v p
    then (String.make 0 ' ')
    else stringOf ((graphvizStringOfPhysicalAddress p)::(divider::[])))::((graphvizStringOfData d)::[])))))))
| Write (t, v, p, d) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('W',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    (String.make 0 ' ')))))))))))::(divider::((fold_left (fun a0 b -> stringOf (a0::(b::(divider::[])))) t
                                                (String.make 0 ' '))::((graphvizStringOfVirtualAddress v)::(divider::((
    if vAPASameTagAndIndex v p
    then (String.make 0 ' ')
    else stringOf ((graphvizStringOfPhysicalAddress p)::(divider::[])))::((graphvizStringOfData d)::[])))))))
| Fence n0 -> fold_left (fun a0 b -> stringOf (a0::(b::(divider::[])))) n0 (String.make 0 ' ')
| FenceVA (n0, v) ->
  stringOf
    ((fold_left (fun a0 b -> stringOf (a0::(b::(divider::[])))) n0 (String.make 0 ' '))::(divider::((graphvizStringOfVirtualAddress
                                                                                                      v)::[])))

(** val graphvizShortStringOfGraphNode : graphNode -> string **)

let graphvizShortStringOfGraphNode = function
| Pair (m, l0) ->
  let { globalID = g; coreID = c; threadID0 = t; intraInstructionID0 = n1; access = a } = m in
  let Pair (p, l) = l0 in
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))::((stringOfNat g)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_',
    (String.make 0 ' ')))::((stringOfNat c)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_',
    (String.make 0 ' ')))::((stringOfNat t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_',
    (String.make 0 ' ')))::((stringOfNat n1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_',
    (String.make 0 ' ')))::((graphvizStringOfMemoryAccess
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('_', (String.make 0 ' '))) a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
    (String.make 0 ' ')))))))))::((stringOfNat p)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_', (String.make 0 ' ')))::((stringOfNat l)::[]))))))))))))))

(** val stringOfGraphEdge : graphEdge -> string **)

let stringOfGraphEdge = function
| Pair (p, color) ->
  let Pair (p0, label) = p in
  let Pair (s, d) = p0 in
  stringOf
    (tab::((graphvizShortStringOfGraphNode s)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))::((graphvizShortStringOfGraphNode d)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))))))))))::(quote::(label::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (';', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))))))))::(color::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (']', (String.make 0 ' ')))::[])))))))))))

(** val shortStringOfGraphNode : graphNode -> string **)

let shortStringOfGraphNode = function
| Pair (s1, l) ->
  let Pair (s2, s3) = l in
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))::((stringOfNat s1.globalID)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))))))::((stringOfNat s2)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))::((stringOfNat s3)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (')', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (')',
    (String.make 0 ' ')))))::[])))))))

(** val shortStringOfGraphEdge : graphEdge -> string **)

let shortStringOfGraphEdge = function
| Pair (p, _) ->
  let Pair (p0, l) = p in
  let Pair (s, d) = p0 in
  stringOf
    ((shortStringOfGraphNode s)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    (String.make 0 ' ')))))))::(l::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('-', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))::((shortStringOfGraphNode d)::[])))))

(** val reverseEdge : graphEdge -> graphEdge **)

let reverseEdge = function
| Pair (p, c) -> let Pair (p0, l) = p in let Pair (s, d) = p0 in Pair ((Pair ((Pair (d, s)), l)), c)

type adjacencyList = (graphNode, ((graphNode, string) prod, string) prod list) prod list

(** val adjacencyListAddEdgeHelper :
    graphNode -> graphNode -> string -> string -> adjacencyList -> adjacencyList -> (bool, adjacencyList) prod **)

let rec adjacencyListAddEdgeHelper s d label color l_old = function
| [] -> Pair (true, ((Pair (s, ((Pair ((Pair (d, label)), color))::[])))::l_old))
| p::t ->
  let Pair (h_s, h_ds) = p in
  if beq_node s h_s
  then Pair (true, (app_rev l_old ((Pair (h_s, ((Pair ((Pair (d, label)), color))::h_ds)))::t)))
  else adjacencyListAddEdgeHelper s d label color ((Pair (h_s, h_ds))::l_old) t

(** val adjacencyListAddEdge : adjacencyList -> graphEdge -> (bool, adjacencyList) prod **)

let adjacencyListAddEdge l = function
| Pair (p, color) ->
  let Pair (p0, label) = p in let Pair (s, d) = p0 in adjacencyListAddEdgeHelper s d label color [] l

(** val adjacencyListFromEdges : graphEdge list -> adjacencyList **)

let rec adjacencyListFromEdges l =
  fold_left (fun a b -> snd (adjacencyListAddEdge a b)) l []

(** val nodesFromEdgesHelper : graphEdge list -> graphNode list -> graphNode list **)

let rec nodesFromEdgesHelper l r =
  match l with
  | [] -> r
  | g::t ->
    let Pair (p, _) = g in
    let Pair (p0, _) = p in
    let Pair (h1, h2) = p0 in
    let r1 =
      match find (beq_node h1) r with
      | Some _ -> r
      | None -> h1::r
    in
    let r2 =
      match find (beq_node h2) r1 with
      | Some _ -> r1
      | None -> h2::r1
    in
    nodesFromEdgesHelper t r2

(** val nodesFromEdges : graphEdge list -> graphNode list **)

let nodesFromEdges l =
  nodesFromEdgesHelper l []

(** val edgesFromAdjacencyList : adjacencyList -> graphEdge list **)

let rec edgesFromAdjacencyList l =
  let f = fun x ->
    let g = fun y ->
      let Pair (y0, color) = y in let Pair (d, label) = y0 in Pair ((Pair ((Pair ((fst x), d)), label)), color)
    in
    map g (snd x)
  in
  let l' = map f l in fold_left app_tail l' []

(** val nodesFromAdjacencyList : adjacencyList -> graphNode list **)

let nodesFromAdjacencyList l =
  nodesFromEdges (edgesFromAdjacencyList l)

(** val adjacencyListFindHelper :
    ((graphNode, string) prod, string) prod list -> bool -> (string, string) prod option -> (string, string) prod
    option **)

let rec adjacencyListFindHelper l found_tc found_not =
  let p = Pair (l, found_tc) in
  let Pair (l0, b) = p in
  (match l0 with
   | [] ->
     if b
     then (match found_not with
           | Some p0 -> Some p0
           | None ->
             Some (Pair (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
               ('T', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
               ('C', (String.make 0 ' '))))),
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
               (String.make 0 ' '))))))))))))
     else found_not
   | p0::t ->
     let Pair (p1, color) = p0 in
     let Pair (_, label) = p1 in
     if beq_string ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
          (String.make 0 ' '))))) label
     then adjacencyListFindHelper t true found_not
     else if string_prefix
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
               (String.make 0 ' '))))))))) label
          then adjacencyListFindHelper t found_tc (Some (Pair (label, color)))
          else Some (Pair (label, color)))

(** val adjacencyListFind : adjacencyList -> graphNode -> graphNode -> (string, string) prod option **)

let rec adjacencyListFind l s d =
  match find (fun x -> beq_node s (fst x)) l with
  | Some l' ->
    let matches = filter (fun x -> beq_node (fst (fst x)) d) (snd l') in adjacencyListFindHelper matches false None
  | None -> None

(** val adjacencyListAddEdgeCheckDups : adjacencyList -> graphEdge -> adjacencyList **)

let adjacencyListAddEdgeCheckDups l e =
  match adjacencyListFind l (fst (fst (fst e))) (snd (fst (fst e))) with
  | Some p ->
    let Pair (label, _) = p in if beq_string (snd (fst e)) label then l else snd (adjacencyListAddEdge l e)
  | None -> snd (adjacencyListAddEdge l e)

(** val adjacencyListGetDsts : adjacencyList -> graphNode -> ((graphNode, string) prod, string) prod list **)

let rec adjacencyListGetDsts l s =
  match find (fun x -> beq_node s (fst x)) l with
  | Some l' -> snd l'
  | None -> []

(** val adjacencyListRemoveHelper :
    graphNode -> ((graphNode, string) prod, string) prod list -> graphNode -> (graphNode, ((graphNode, string) prod,
    string) prod list) prod **)

let rec adjacencyListRemoveHelper s ds d =
  Pair (s, (removeb (fun x -> beq_node d (fst (fst x))) ds))

(** val adjacencyListRemove : adjacencyList -> graphNode -> graphNode -> adjacencyList **)

let rec adjacencyListRemove l s d =
  match l with
  | [] -> []
  | p::t ->
    let Pair (h1, h2) = p in
    if beq_node s h1 then (adjacencyListRemoveHelper h1 h2 d)::t else (Pair (h1, h2))::(adjacencyListRemove t s d)

(** val adjacencyListRemoveSource : adjacencyList -> graphNode -> adjacencyList **)

let rec adjacencyListRemoveSource l s =
  match l with
  | [] -> []
  | p::t -> let Pair (h1, h2) = p in if beq_node s h1 then t else (Pair (h1, h2))::(adjacencyListRemoveSource t s)

type topsortResult =
| ReverseTotalOrder of graphNode list
| Cyclic of graphEdge list
| Abort of int

(** val sourceNodes : graphEdge list -> graphNode list -> graphNode list **)

let rec sourceNodes l srcs =
  match l with
  | [] -> srcs
  | g::t ->
    let Pair (p, _) = g in
    let Pair (p0, _) = p in let Pair (_, h2) = p0 in sourceNodes t (removeb (beq_node h2) srcs)

(** val topsortHelperProcessNode :
    graphNode list -> graphNode list -> graphNode -> adjacencyList -> (adjacencyList, graphNode list) prod **)

let rec topsortHelperProcessNode l s n0 incoming =
  match l with
  | [] -> Pair (incoming, s)
  | h::t ->
    let incoming' = adjacencyListRemove incoming h n0 in
    (match adjacencyListGetDsts incoming' h with
     | [] -> topsortHelperProcessNode t (h::s) n0 incoming'
     | _::_ -> topsortHelperProcessNode t s n0 incoming')

(** val topsortHelper :
    int -> graphNode list -> graphNode list -> adjacencyList -> adjacencyList -> topsortResult **)

let rec topsortHelper i l s outgoing incoming =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    warning (Abort 0) (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('U', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
    (fun i' ->
    match s with
    | [] ->
      (match edgesFromAdjacencyList outgoing with
       | [] -> ReverseTotalOrder l
       | g::l0 -> Cyclic (g::l0))
    | h::t ->
      let f = fun x -> fst (fst x) in
      let dsts = map f (adjacencyListGetDsts outgoing h) in
      let Pair (incoming', s') = topsortHelperProcessNode dsts t h incoming in
      let outgoing' = adjacencyListRemoveSource outgoing h in
      let l' = h::l in topsortHelper i' l' s' outgoing' incoming')
    i

(** val topsort : graphEdge list -> topsortResult **)

let topsort e =
  let a = adjacencyListFromEdges e in
  let n0 = nodesFromAdjacencyList a in
  let i = add (add (length n0) (length e)) ((fun x -> x + 1) 0) in
  let s = sourceNodes e (map fst a) in
  let a' = adjacencyListFromEdges (map reverseEdge e) in topsortHelper i [] s a a'

(** val transitiveClosureHelper2 :
    adjacencyList -> adjacencyList -> ((graphNode, string) prod, string) prod list -> graphNode list -> adjacencyList **)

let rec transitiveClosureHelper2 a' tc preds succs =
  match preds with
  | [] -> tc
  | p::t ->
    let Pair (p0, _) = p in
    let Pair (h, _) = p0 in
    let getLabel = fun x ->
      match adjacencyListFind a' x h with
      | Some label -> label
      | None ->
        Pair (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
          (String.make 0 ' '))))),
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
          (String.make 0 ' '))))))))))
    in
    let f = fun x -> let Pair (label, color) = getLabel x in Pair ((Pair ((Pair (h, x)), label)), color) in
    let edges = map f succs in
    let tc' = fold_left adjacencyListAddEdgeCheckDups edges tc in transitiveClosureHelper2 a' tc' t succs

(** val transitiveClosureHelper : adjacencyList -> adjacencyList -> graphNode -> adjacencyList **)

let transitiveClosureHelper a' tc n0 =
  let preds = adjacencyListGetDsts a' n0 in
  let f = fun x -> fst (fst x) in
  let succs = map f (adjacencyListGetDsts tc n0) in transitiveClosureHelper2 a' tc preds (n0::succs)

type transitiveClosureResult =
| TC of adjacencyList
| TCError of graphEdge list

(** val transitiveClosure : graphEdge list -> transitiveClosureResult **)

let transitiveClosure l =
  let a' = adjacencyListFromEdges (map reverseEdge l) in
  (match topsort l with
   | ReverseTotalOrder l' -> TC (fold_left (transitiveClosureHelper a') l' [])
   | Cyclic e -> TCError e
   | Abort _ -> TCError [])

(** val cycleFromNodeHelper :
    adjacencyList -> graphNode -> graphNode -> ((graphNode, string) prod, string) prod list -> graphEdge list -> int
    -> graphEdge list option **)

let rec cycleFromNodeHelper g source target dsts l i =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    None)
    (fun i' ->
    match dsts with
    | [] -> None
    | p::t ->
      let Pair (p0, color) = p in
      let Pair (h, label) = p0 in
      if beq_node h target
      then Some ((Pair ((Pair ((Pair (source, h)), label)), color))::l)
      else (match cycleFromNodeHelper g h target (adjacencyListGetDsts g h) ((Pair ((Pair ((Pair (source, h)),
                    label)), color))::l) i' with
            | Some l' -> Some l'
            | None -> cycleFromNodeHelper g source target t l i'))
    i

(** val cycleFromNode : graphEdge list -> graphNode -> graphEdge list option **)

let cycleFromNode l n0 =
  let g = adjacencyListFromEdges l in cycleFromNodeHelper g n0 n0 (adjacencyListGetDsts g n0) [] (length l)

(** val findCycleHelper : graphEdge list -> graphNode list -> graphEdge list option **)

let rec findCycleHelper l = function
| [] -> None
| h::t ->
  (match cycleFromNode l h with
   | Some l' -> Some l'
   | None -> findCycleHelper l t)

(** val findCycle : graphEdge list -> graphEdge list option **)

let rec findCycle l =
  findCycleHelper l (nodesFromEdges l)

type architectureLevelEdge = ((int, int) prod, string) prod

(** val graphvizPrettyStringOfMicroop : microop -> string **)

let graphvizPrettyStringOfMicroop uop =
  let { globalID = g; coreID = _; threadID0 = t; intraInstructionID0 = n0; access = a } = uop in
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))::((if Nat.eqb 0 t
                                     then (String.make 0 ' ')
                                     else stringOf
                                            (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                            ('t',
                                            (String.make 0 ' ')))::((stringOfNat t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                            (' ', (String.make 0 ' ')))::[]))))::((stringOfNat g)::((if Nat.eqb 0 n0
                                                                                                     then (String.make 0 ' ')
                                                                                                     else stringOf
                                                                                                           (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           (' ',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('i',
                                                                                                           (String.make 0 ' ')))))::(
                                                                                                           (stringOfNat
                                                                                                           n0)::[])))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('\\', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))::((graphvizStringOfMemoryAccess
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                (' ', (String.make 0 ' '))) a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('\\', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))::[])))))))

(** val microopsFromNodesHelper : graphNode list -> microop list -> microop list **)

let rec microopsFromNodesHelper l r =
  match l with
  | [] -> r
  | h::t ->
    (match find (beq_uop (fst h)) r with
     | Some _ -> microopsFromNodesHelper t r
     | None -> microopsFromNodesHelper t ((fst h)::r))

(** val microopsFromNodes : graphNode list -> microop list **)

let microopsFromNodes l =
  microopsFromNodesHelper l []

(** val blt_uop : graphEdge list -> microop -> microop -> bool **)

let blt_uop g a b =
  let e1 = Pair ((Pair ((Pair ((Pair (a, (Pair (a.coreID, 0)))), (Pair (b, (Pair (b.coreID, 0)))))),
    (String.make 0 ' '))), (String.make 0 ' '))
  in
  let e2 = Pair ((Pair ((Pair ((Pair (b, (Pair (b.coreID, 0)))), (Pair (a, (Pair (a.coreID, 0)))))),
    (String.make 0 ' '))), (String.make 0 ' '))
  in
  if blt_nat a.coreID b.coreID
  then true
  else if blt_nat b.coreID a.coreID
       then false
       else if blt_nat a.threadID0 b.threadID0
            then true
            else if blt_nat b.threadID0 a.threadID0
                 then false
                 else (match find (beq_edge e1) g with
                       | Some _ -> true
                       | None ->
                         (match find (beq_edge e2) g with
                          | Some _ -> false
                          | None -> blt_nat a.intraInstructionID0 b.intraInstructionID0))

(** val sortMicroopsInsertionSortHelper :
    graphEdge list -> microop list -> microop list -> microop -> microop list **)

let rec sortMicroopsInsertionSortHelper g l r uop =
  match l with
  | [] -> app_rev (uop::[]) r
  | h::t -> if blt_uop g uop h then app_rev (uop::l) r else sortMicroopsInsertionSortHelper g t (h::r) uop

(** val addDummyUarchEdgesForPOHelper :
    architectureLevelEdge list -> microop list -> graphEdge list -> graphEdge list **)

let rec addDummyUarchEdgesForPOHelper l uops r =
  match l with
  | [] -> r
  | a0::t ->
    let Pair (p, c) = a0 in
    let Pair (a, b) = p in
    if beq_string ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         (String.make 0 ' '))))) c
    then let o = find (fun x -> Nat.eqb x.globalID a) uops in
         let o0 = find (fun x -> Nat.eqb x.globalID b) uops in
         (match o with
          | Some a' ->
            (match o0 with
             | Some b' ->
               let e = Pair ((Pair ((Pair ((Pair (a', (Pair (a'.coreID, 0)))), (Pair (b', (Pair (b'.coreID, 0)))))),
                 c)), (String.make 0 ' '))
               in
               addDummyUarchEdgesForPOHelper t uops (e::r)
             | None ->
               let result = addDummyUarchEdgesForPOHelper t uops r in
               warning result
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))::((stringOfNat b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('w', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('h', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('s', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('g', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('g', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('p', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('h', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('!', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::[]))))
          | None ->
            (match o0 with
             | Some _ ->
               let result = addDummyUarchEdgesForPOHelper t uops r in
               warning result
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))::((stringOfNat a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('w', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('h', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('s', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('g', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('g', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('p', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('h', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('!', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::[])))
             | None ->
               let result = addDummyUarchEdgesForPOHelper t uops r in
               warning result
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfNat a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ',
                 (String.make 0 ' ')))))))))::((stringOfNat b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('w', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('h', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('s', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('g', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('g', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('p', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('h', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('!', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::[])))))))
    else addDummyUarchEdgesForPOHelper t uops r

(** val addDummyUarchEdgesForPO : architectureLevelEdge list -> microop list -> graphEdge list **)

let addDummyUarchEdgesForPO l uops =
  addDummyUarchEdgesForPOHelper l uops []

(** val sortMicroopsInsertionSort : graphEdge list -> microop list -> microop -> microop list **)

let sortMicroopsInsertionSort g l uop =
  sortMicroopsInsertionSortHelper g l [] uop

(** val sortMicroops : microop list -> architectureLevelEdge list -> microop list **)

let sortMicroops l arch_edges =
  let g = addDummyUarchEdgesForPO arch_edges l in
  (match transitiveClosure g with
   | TC g' -> let g'' = edgesFromAdjacencyList g' in fold_left (sortMicroopsInsertionSort g'') l []
   | TCError _ ->
     warning [] (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('?',
       (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))

(** val microopXPositionsHelper :
    microop list -> (microop, int) prod list -> int -> int -> (microop, int) prod list **)

let rec microopXPositionsHelper l r current last_core =
  match l with
  | [] -> r
  | h::t ->
    if Nat.eqb h.coreID last_core
    then microopXPositionsHelper t ((Pair (h, current))::r) ((fun x -> x + 1) current) last_core
    else microopXPositionsHelper t ((Pair (h, ((fun x -> x + 1) current)))::r)
           (add current ((fun x -> x + 1) ((fun x -> x + 1) 0))) h.coreID

(** val microopXPositions : microop list -> architectureLevelEdge list -> (microop, int) prod list **)

let microopXPositions l arch_edges =
  microopXPositionsHelper (sortMicroops l arch_edges) [] ((fun x -> x + 1) 0) 0

(** val graphvizNodeXPosition : (microop, int) prod list -> microop -> string **)

let graphvizNodeXPosition l uop =
  match find (fun x -> beq_uop uop (fst x)) l with
  | Some p -> let Pair (_, n0) = p in stringOfNat n0
  | None ->
    warning ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('1',
      (String.make 0 ' ')))))
      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('X',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])

(** val graphvizStringOfGraphNode : string -> (microop, int) prod list -> graphNode -> string **)

let graphvizStringOfGraphNode props xs n0 =
  stringOf
    (tab::((graphvizShortStringOfGraphNode n0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::(quote::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (';',
    (String.make 0 ' ')))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('p', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))::(quote::((graphvizNodeXPosition xs (fst n0))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    (String.make 0 ' ')))))::((stringOfNat (snd (snd n0)))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('!',
    (String.make 0 ' ')))::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (';',
    (String.make 0 ' ')))::(props::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (']', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))::(newline::[])))))))))))))))))

(** val graphvizColorForEdgeLabel : string -> string **)

let graphvizColorForEdgeLabel c =
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    (String.make 0 ' ')))))))))))))))::(c::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    (String.make 0 ' ')))))))))))))))))))))))))))::(c::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))::[])))))

(** val graphvizTextLabel : string -> string **)

let graphvizTextLabel label =
  let f = fun x -> beq_string label x in
  let dont_label = ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    (String.make 0 ' ')))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('p', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    (String.make 0 ' ')))))))))))))))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('p', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    (String.make 0 ' ')))))))))::[]))
  in
  (match find f dont_label with
   | Some _ -> (String.make 0 ' ')
   | None ->
     stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
       (String.make 0 ' ')))))))))))))::(quote::(label::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       (';', (String.make 0 ' ')))::[]))))))

(** val graphvizStringOfGraphEdge : graphEdge list -> string -> graphEdge -> string **)

let graphvizStringOfGraphEdge bold props e = match e with
| Pair (p, color) ->
  let Pair (p0, label) = p in
  let Pair (s, d) = p0 in
  let constraint0 =
    if if Nat.eqb (fst s).globalID (fst d).globalID
       then true
       else if Nat.eqb 0 (snd (snd s)) then Nat.eqb 0 (snd (snd s)) else false
    then (String.make 0 ' ')
    else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
           (String.make 0 ' '))))))))))))))))))))))))))))))))))
  in
  let colorstring = graphvizColorForEdgeLabel color in
  let thickness =
    if existsb (beq_edge e) bold
    then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('w',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('5',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
           (String.make 0 ' '))))))))))))))))))))))
    else (String.make 0 ' ')
  in
  let textlabel = graphvizTextLabel label in
  stringOf
    (tab::((graphvizShortStringOfGraphNode s)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))::((graphvizShortStringOfGraphNode d)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    (String.make 0 ' ')))))::(textlabel::(constraint0::(colorstring::(thickness::(props::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (']', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))::(newline::[]))))))))))))

(** val graphvizEdges : graphEdge list -> graphEdge list -> string list **)

let graphvizEdges l bold =
  map (graphvizStringOfGraphEdge bold (String.make 0 ' ')) l

(** val setNthToMin : int option list -> int -> int -> int option list **)

let rec setNthToMin l p v =
  match l with
  | [] ->
    ((fun fO fS n -> if n=0 then fO () else fS (n-1))
       (fun _ -> (Some
       v)::[])
       (fun p' ->
       None::(setNthToMin [] p' v))
       p)
  | o::t ->
    (match o with
     | Some h ->
       ((fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> (Some
          (min h v))::t)
          (fun p' -> (Some
          h)::(setNthToMin t p' v))
          p)
     | None ->
       ((fun fO fS n -> if n=0 then fO () else fS (n-1))
          (fun _ -> (Some
          v)::t)
          (fun p' ->
          None::(setNthToMin t p' v))
          p))

(** val graphvizPipelineLabelXPositionHelper :
    graphNode list -> (microop, int) prod list -> int option list -> int option list **)

let rec graphvizPipelineLabelXPositionHelper l xs l' =
  match l with
  | [] -> l'
  | h::t ->
    (match find (fun x -> beq_uop (fst h) (fst x)) xs with
     | Some p ->
       let Pair (_, n0) = p in graphvizPipelineLabelXPositionHelper t xs (setNthToMin l' (fst h).coreID (pred n0))
     | None -> graphvizPipelineLabelXPositionHelper t xs l')

(** val graphvizPipelineLabelXPositions : (microop, int) prod list -> graphNode list -> int option list **)

let rec graphvizPipelineLabelXPositions xs l =
  graphvizPipelineLabelXPositionHelper l xs []

(** val graphvizLocationLabelStringsHelper2 : int -> int -> string list -> string list -> string list **)

let rec graphvizLocationLabelStringsHelper2 x n0 l l' =
  match l with
  | [] -> l'
  | h::t ->
    graphvizLocationLabelStringsHelper2 x ((fun x -> x + 1) n0) t
      ((stringOf (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('l',
         (String.make 0 ' ')))::((stringOfNat x)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('_',
         (String.make 0 ' ')))::((stringOfNat n0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('_', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
         (String.make 0 ' ')))))))))))))))))))))))))))))::(quote::(h::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (';', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
         (String.make 0 ' ')))))))))))::(quote::((stringOfNat x)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
         (String.make 0 ' ')))))::((stringOfNat n0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('!',
         (String.make 0 ' ')))::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (';', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
         (String.make 0 ' ')))))))))))))))))))))))))))::(newline::[])))))))))))))))))))::l')

(** val graphvizLocationLabelStringsHelper : string list list -> int option list -> string list -> string list **)

let rec graphvizLocationLabelStringsHelper stage_names label_x_positions l =
  match stage_names with
  | [] -> l
  | h1::t1 ->
    (match label_x_positions with
     | [] -> l
     | o::t2 ->
       (match o with
        | Some h2 ->
          let l' = graphvizLocationLabelStringsHelper2 h2 0 h1 [] in
          graphvizLocationLabelStringsHelper t1 t2 (app_rev l l')
        | None -> graphvizLocationLabelStringsHelper t1 t2 l))

(** val graphvizLocationLabels : string list list -> (microop, int) prod list -> graphNode list -> string list **)

let graphvizLocationLabels stage_names xs l =
  let label_x_positions = graphvizPipelineLabelXPositions xs l in
  graphvizLocationLabelStringsHelper stage_names label_x_positions []

(** val graphvizNodeLabelString : (microop, int) prod list -> microop -> string **)

let rec graphvizNodeLabelString xs uop =
  stringOf (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))::((stringOfNat uop.globalID)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_',
    (String.make 0 ' ')))::((stringOfNat uop.intraInstructionID0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('_', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))))))))))))))))))))))::(quote::((graphvizPrettyStringOfMicroop uop)::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (';', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))))::(quote::((graphvizNodeXPosition xs uop)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('0',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('5',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
    (String.make 0 ' ')))))))))))::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (';', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))::(newline::[]))))))))))))))))

(** val graphvizNodeLabels : (microop, int) prod list -> graphNode list -> string list **)

let rec graphvizNodeLabels xs l =
  map (graphvizNodeLabelString xs) (microopsFromNodes l)

(** val graphvizNodes : string list list -> graphNode list -> architectureLevelEdge list -> string list **)

let graphvizNodes stage_names l arch_edges =
  let xs = microopXPositions (microopsFromNodes l) arch_edges in
  fold_left app
    ((map (graphvizStringOfGraphNode (String.make 0 ' ') xs) l)::((graphvizNodeLabels xs l)::((graphvizLocationLabels
                                                                                                stage_names xs l)::[])))
    []

(** val isNotTCEdge : graphEdge -> bool **)

let isNotTCEdge = function
| Pair (p, _) ->
  let Pair (_, label) = p in
  negb
    (beq_string label ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('T', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
      (String.make 0 ' '))))))

(** val graphvizCompressedGraph :
    string -> string list list -> graphEdge list -> graphEdge list -> architectureLevelEdge list -> string list **)

let graphvizCompressedGraph title stage_names g thick_edges arch_edges =
  let g' = filter isNotTCEdge g in
  let bold_edges =
    match thick_edges with
    | [] ->
      (match topsort g' with
       | ReverseTotalOrder _ -> []
       | Cyclic e ->
         (match findCycle e with
          | Some l -> l
          | None -> [])
       | Abort _ -> [])
    | _::_ -> thick_edges
  in
  fold_left app ((( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('G',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('{',
    (String.make 0 ' ')))))))))))))))))))))))::(newline::[]))::((tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))::(newline::[])))::((tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))))::(newline::[])))::((tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('s', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))::(newline::[])))::((tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    (String.make 0 ' ')))))))))))))::(quote::(title::(quote::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (';',
    (String.make 0 ' ')))::(newline::[])))))))::((graphvizEdges g' bold_edges)::((graphvizNodes stage_names
                                                                                   (nodesFromEdges g') arch_edges)::((( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('}', (String.make 0 ' ')))::(newline::[]))::[])))))))) []

type stringOrInt =
| SoISum of stringOrInt * stringOrInt
| SoIString of string
| SoIInt of int
| SoICoreID of string

(** val stringOfSoI : stringOrInt -> string **)

let rec stringOfSoI = function
| SoISum (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))::((stringOfSoI a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (')', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('+',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))))))::((stringOfSoI b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (')', (String.make 0 ' ')))::[])))))
| SoIString s -> s
| SoIInt n0 -> stringOfNat n0
| SoICoreID s ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))::(s::[]))

type predGraphNode = (string, (stringOrInt, stringOrInt) prod) prod

type predGraphEdge = (((predGraphNode, predGraphNode) prod, string) prod, string) prod

(** val stringOfPredGraphNode : predGraphNode -> string **)

let stringOfPredGraphNode = function
| Pair (s1, p) ->
  let Pair (s2, s3) = p in
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))::(s1::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))))))::((stringOfSoI s2)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))::((stringOfSoI s3)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (')', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (')',
    (String.make 0 ' ')))))::[])))))))

(** val stringOfPredGraphEdge : predGraphEdge -> string **)

let stringOfPredGraphEdge = function
| Pair (p, _) ->
  let Pair (p0, l) = p in
  let Pair (s, d) = p0 in
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))::((stringOfPredGraphNode s)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    (String.make 0 ' ')))))))::(l::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('-', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))::((stringOfPredGraphNode d)::[]))))))

type fOLPredicateType =
| PredDebug of string
| PredHasDependency of string * string * string
| PredIsRead of string
| PredIsWrite of string
| PredIsAPICAccess of string * string
| PredIsFence of string
| PredAccessType of string * string
| PredSameUop of string * string
| PredSameNode of string * string
| PredSameCore of stringOrInt * stringOrInt
| PredSmallerGlobalID of string * string
| PredSameGlobalID of string * string
| PredSameIntraInstID of string * string
| PredSameThread of stringOrInt * stringOrInt
| PredOnCore of stringOrInt * string
| PredOnThread of stringOrInt * string
| PredSameVirtualAddress of string * string
| PredSamePhysicalAddress of string * string
| PredSameVirtualTag of string * string
| PredSamePhysicalTag of string * string
| PredSameIndex of string * string
| PredKnownData of string
| PredSameData of string * string
| PredDataFromPAInitial of string
| PredDataFromPAFinal of string
| PredSamePAasPTEforVA of string * string
| PredDataIsCorrectTranslation of accessedStatus * dirtyStatus * string * string
| PredTranslationMatchesInitialState of accessedStatus * dirtyStatus * string
| PredProgramOrder of string * string
| PredConsec of string * string
| PredAddEdges of predGraphEdge list
| PredEdgesExist of predGraphEdge list
| PredNodesExist of predGraphNode list
| PredTrue
| PredFalse
| PredHasID of int * int * int * int * string
| PredHasGlobalID of int * string

(** val stringOfPredicate : bool -> fOLPredicateType -> string **)

let stringOfPredicate verbose = function
| PredDebug a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))::(a::[]))
| PredHasDependency (a, b, c) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('H',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::(b::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(c::[]))))))
| PredIsRead a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))::(a::[]))
| PredIsWrite a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('W',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))::(a::[]))
| PredIsAPICAccess (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredIsFence a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))::(a::[]))
| PredAccessType (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameUop (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('U',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameNode (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameCore (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))::((stringOfSoI a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::((stringOfSoI b)::[]))))
| PredSmallerGlobalID (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('G',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameGlobalID (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('G',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameIntraInstID (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameThread (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))::((stringOfSoI a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::((stringOfSoI b)::[]))))
| PredOnCore (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))::((stringOfSoI a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredOnThread (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))::((stringOfSoI a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameVirtualAddress (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('V',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSamePhysicalAddress (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameVirtualTag (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('V',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSamePhysicalTag (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredSameIndex (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredKnownData a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('K',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('w',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))::(a::[]))
| PredSameData (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredDataFromPAInitial a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))::(a::[]))
| PredDataFromPAFinal a ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))::(a::[]))
| PredSamePAasPTEforVA (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('V',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredDataIsCorrectTranslation (a, b, c, d) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))::((stringOfAccessedStatus a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfDirtyStatus b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::(c::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(d::[]))))))))
| PredTranslationMatchesInitialState (a, b, c) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('M',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::((stringOfAccessedStatus a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfDirtyStatus b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(c::[]))))))
| PredProgramOrder (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredConsec (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))::(a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))
| PredAddEdges l ->
  if verbose
  then stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\\',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         (String.make 0 ' ')))))))))))))))))))))))))::((fold_left (fun a b ->
                                                         stringOf
                                                           (a::((stringOfPredGraphEdge b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('\\',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n', (String.make 0 ' ')))))::[])))) l
                                                         (String.make 0 ' '))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (')', (String.make 0 ' ')))::[])))
  else stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (')',
         (String.make 0 ' ')))))))))))))))))))))))))))))::[])
| PredEdgesExist _ ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (')',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))::[])
| PredNodesExist _ ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (')',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))::[])
| PredTrue ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('U',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    (String.make 0 ' ')))))))))::[])
| PredFalse ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    (String.make 0 ' ')))))))))))::[])
| PredHasID (a, b, c, d, e) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('H',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))::((stringOfNat a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfNat b)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfNat c)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfNat d)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(e::[]))))))))))
| PredHasGlobalID (a, b) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('H',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('G',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))::((stringOfNat a)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::(b::[]))))

(** val fOLLookupPredicate_IIIIS : string -> int -> int -> int -> int -> string -> fOLPredicateType **)

let fOLLookupPredicate_IIIIS name a b c d e =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('H', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
       (String.make 0 ' ')))))))))))
  then PredHasID (a, b, c, d, e)
  else warning PredFalse (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('P', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_SSS : string -> string -> string -> string -> fOLPredicateType **)

let fOLLookupPredicate_SSS name a b c =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('H', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
       (String.make 0 ' ')))))))))))))))))))))))))))
  then PredHasDependency (a, b, c)
  else warning PredFalse (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('P', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_IS : string -> int -> string -> fOLPredicateType **)

let fOLLookupPredicate_IS name a b =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('S', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       (String.make 0 ' ')))))))))))))))))
  then PredSameCore ((SoIInt a), (SoIString b))
  else if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('S', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            (String.make 0 ' ')))))))))))))))))))))
       then PredSameThread ((SoIInt a), (SoIString b))
       else if beq_string name
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 (String.make 0 ' ')))))))))))))
            then PredOnCore ((SoIInt a), b)
            else if beq_string name
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('O',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('T',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('h',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('d', (String.make 0 ' ')))))))))))))))))
                 then PredOnThread ((SoIInt a), b)
                 else if beq_string name
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('H',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('a',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('s',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('G',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('l',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('o',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('b',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('a',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('l',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('I',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('D', (String.make 0 ' ')))))))))))))))))))))))
                      then PredHasGlobalID (a, b)
                      else warning PredFalse
                             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('P',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('r',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('c',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('f',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('!', (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_ADSS : string -> accessedStatus -> dirtyStatus -> string -> string -> fOLPredicateType **)

let fOLLookupPredicate_ADSS name a b c d =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('D', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))
  then PredDataIsCorrectTranslation (a, b, c, d)
  else warning PredFalse (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('P', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_ADS : string -> accessedStatus -> dirtyStatus -> string -> fOLPredicateType **)

let fOLLookupPredicate_ADS name a b c =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('T', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('M',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  then PredTranslationMatchesInitialState (a, b, c)
  else warning PredFalse (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('P', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_SS : string -> string -> string -> fOLPredicateType **)

let fOLLookupPredicate_SS name a b =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('I', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       (String.make 0 ' ')))))))))))))))))))))))))
  then PredIsAPICAccess (a, b)
  else if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('F', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            (String.make 0 ' ')))))))))))))))))))
       then PredAccessType (a, b)
       else if beq_string name
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 (String.make 0 ' ')))))))))))))))))))))
            then PredAccessType (a, b)
            else if beq_string name
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('S',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('m',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('M',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('c',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('p', (String.make 0 ' ')))))))))))))))))))))))
                 then PredSameUop (a, b)
                 else if beq_string name
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('S',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('a',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('m',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('C',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('o',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('r',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e', (String.make 0 ' ')))))))))))))))))
                      then PredSameCore ((SoIString a), (SoIString b))
                      else if beq_string name
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('S',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('m',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('a',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('l',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('l',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('r',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('G',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('l',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('o',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('b',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('a',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('l',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('I',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('D', (String.make 0 ' ')))))))))))))))))))))))))))))))
                           then PredSmallerGlobalID (a, b)
                           else if beq_string name
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('S',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('a',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('m',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('e',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('G',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('l',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('o',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('b',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('a',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('l',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('I',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('D', (String.make 0 ' ')))))))))))))))))))))))))
                                then PredSameGlobalID (a, b)
                                else if beq_string name
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('S',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('a',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('m',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('e',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('I',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('n',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('t',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('r',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('a',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('I',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('n',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('s',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('t',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('r',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('u',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('c',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('t',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('i',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('o',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('n',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('I',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('D', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))
                                     then PredSameIntraInstID (a, b)
                                     else if beq_string name
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('O',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('n',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('C',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('o',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('r',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('e', (String.make 0 ' ')))))))))))))
                                          then PredOnCore ((SoIString a), b)
                                          else if beq_string name
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('S',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('m',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('e',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('T',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('h',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('r',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('e',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('d', (String.make 0 ' ')))))))))))))))))))))
                                               then PredSameThread ((SoIString a), (SoIString b))
                                               else if beq_string name
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('O',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('n',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('T',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('h',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('r',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('e',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('a',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('d', (String.make 0 ' ')))))))))))))))))
                                                    then PredOnThread ((SoIString a), b)
                                                    else if beq_string name
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('S',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('a',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('m',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('e',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('V',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('i',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('r',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('t',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('u',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('a',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('l',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('A',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('d',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('d',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('r',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('e',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('s',
                                                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                              ('s',
                                                              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))
                                                         then PredSameVirtualAddress (a, b)
                                                         else if beq_string name
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('S',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('a',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('m',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('e',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('P',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('h',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('y',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('s',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('i',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('c',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('a',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('l',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('A',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('d',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('d',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('r',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('e',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('s',
                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                   ('s',
                                                                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))
                                                              then PredSamePhysicalAddress (a, b)
                                                              else if beq_string name
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('S',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('a',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('m',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('e',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('V',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('i',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('r',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('t',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('u',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('a',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('l',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('T',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('a',
                                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                        ('g',
                                                                        (String.make 0 ' ')))))))))))))))))))))))))))))
                                                                   then PredSameVirtualTag (a, b)
                                                                   else if beq_string name
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('S',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('a',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('m',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('e',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('P',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('h',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('y',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('s',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('i',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('c',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('a',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('l',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('T',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('a',
                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                             ('g',
                                                                             (String.make 0 ' ')))))))))))))))))))))))))))))))
                                                                        then PredSamePhysicalTag (a, b)
                                                                        else if beq_string name
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('S',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('a',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('m',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('e',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('I',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('n',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('d',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('e',
                                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                  ('x',
                                                                                  (String.make 0 ' ')))))))))))))))))))
                                                                             then PredSameIndex (a, b)
                                                                             else if beq_string name
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('S',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('a',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('m',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('e',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('D',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('a',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('t',
                                                                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                       ('a',
                                                                                       (String.make 0 ' ')))))))))))))))))
                                                                                  then PredSameData (a, b)
                                                                                  else if beq_string name
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('S',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('a',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('m',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('e',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('P',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('A',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('a',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('s',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('P',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('T',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('E',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('f',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('o',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('r',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('V',
                                                                                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                            ('A',
                                                                                            (String.make 0 ' ')))))))))))))))))))))))))))))))))
                                                                                       then PredSamePAasPTEforVA (a,
                                                                                              b)
                                                                                       else if beq_string name
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('D',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('a',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('t',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('a',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('I',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('s',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('C',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('o',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('r',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('r',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('e',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('c',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('t',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('T',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('r',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('a',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('n',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('s',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('l',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('a',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('t',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('i',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('o',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('n',
                                                                                                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                            then let result =
                                                                                                   PredDataIsCorrectTranslation
                                                                                                   (AccessedDontCare,
                                                                                                   DirtyDontCare, a,
                                                                                                   b)
                                                                                                 in
                                                                                                 warning result
                                                                                                   (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('D',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('t',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('I',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('C',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('o',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('r',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('r',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('e',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('c',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('t',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('T',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('r',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('n',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('l',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('t',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('i',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('o',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('n',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (':',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('u',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('m',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('i',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('n',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('g',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('c',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('c',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('e',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('e',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('d',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('n',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('d',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('d',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('i',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('r',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('t',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('y',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('r',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('e',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('d',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('o',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('n',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('\'',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('t',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   (' ',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('c',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('a',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('r',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('e',
                                                                                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                   ('s',
                                                                                                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                                                                                            else if beq_string name
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('C',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('o',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('n',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('s',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('e',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('c',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('u',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('t',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('i',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('v',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('e',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('M',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('i',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('c',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('r',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('o',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('o',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('p',
                                                                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                      ('s',
                                                                                                      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))
                                                                                                 then PredConsec (a,
                                                                                                        b)
                                                                                                 else if beq_string
                                                                                                           name
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('P',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('r',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('o',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('g',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('r',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('a',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('m',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('O',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('r',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('d',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('e',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('r',
                                                                                                           (String.make 0 ' ')))))))))))))))))))))))))
                                                                                                      then PredProgramOrder
                                                                                                           (a, b)
                                                                                                      else warning
                                                                                                           PredFalse
                                                                                                           (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('P',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('r',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('e',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('d',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('i',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('c',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('a',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('t',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('e',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           (' ',
                                                                                                           (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           (' ',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('n',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('o',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('t',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           (' ',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('f',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('o',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('u',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('n',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('d',
                                                                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                           ('!',
                                                                                                           (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_S : string -> string -> fOLPredicateType **)

let fOLLookupPredicate_S name a =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('D', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
       (String.make 0 ' ')))))))))))
  then PredDebug a
  else if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('I', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            (String.make 0 ' ')))))))))))))
       then PredIsRead a
       else if beq_string name
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 (String.make 0 ' ')))))))))))))))))))
            then PredIsRead a
            else if beq_string name
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('I',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('s',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('W',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e', (String.make 0 ' ')))))))))))))))
                 then PredIsWrite a
                 else if beq_string name
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('I',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('s',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('A',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('n',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('y',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('W',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('r',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('i',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('t',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e', (String.make 0 ' ')))))))))))))))))))))
                      then PredIsWrite a
                      else if beq_string name
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('I',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('s',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('F',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('n',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('c',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e', (String.make 0 ' ')))))))))))))))
                           then PredIsFence a
                           else if beq_string name
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('I',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('s',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('A',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('n',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('y',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('F',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('e',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('n',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('c',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('e', (String.make 0 ' ')))))))))))))))))))))
                                then PredIsFence a
                                else if beq_string name
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('K',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('n',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('o',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('w',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('n',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('D',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('a',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('t',
                                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                          ('a', (String.make 0 ' ')))))))))))))))))))
                                     then PredKnownData a
                                     else if beq_string name
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('D',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('a',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('t',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('a',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('F',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('r',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('o',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('m',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('I',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('n',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('i',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('t',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('i',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('a',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('l',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('S',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('t',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('a',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('t',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('e',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('A',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('t',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('P',
                                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                               ('A',
                                               (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))
                                          then PredDataFromPAInitial a
                                          else if beq_string name
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('D',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('t',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('F',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('r',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('m',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('F',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('i',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('n',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('l',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('S',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('t',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('t',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('e',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('A',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('t',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('P',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('A',
                                                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))
                                               then PredDataFromPAFinal a
                                               else if beq_string name
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('T',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('r',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('a',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('n',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('s',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('l',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('a',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('t',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('i',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('o',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('n',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('M',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('a',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('t',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('c',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('h',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('e',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('s',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('I',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('n',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('i',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('t',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('i',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('a',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('l',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('S',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('t',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('a',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('t',
                                                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                         ('e',
                                                         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                    then let result = PredTranslationMatchesInitialState
                                                           (AccessedDontCare, DirtyDontCare, a)
                                                         in
                                                         warning result
                                                           (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('T',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('r',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('l',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('i',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('o',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('M',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('c',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('h',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('I',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('i',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('i',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('l',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('S',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (':',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('u',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('m',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('i',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('g',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('c',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('c',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('d',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('d',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('d',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('i',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('r',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('y',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('r',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('d',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('o',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('\'',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('c',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('r',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('s',
                                                           (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                                                    else warning PredFalse
                                                           (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('P',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('r',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('d',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('i',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('c',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('a',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('e',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('o',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('t',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           (' ',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('f',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('o',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('u',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('n',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('d',
                                                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                           ('!', (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_E : string -> predGraphEdge -> fOLPredicateType **)

let fOLLookupPredicate_E name e =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('A', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       (String.make 0 ' ')))))))))))))))
  then PredAddEdges (e::[])
  else if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('E', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
            (String.make 0 ' ')))))))))))))))))))))
       then PredEdgesExist (e::[])
       else warning PredFalse
              (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
              (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_N : string -> predGraphNode -> fOLPredicateType **)

let fOLLookupPredicate_N name n0 =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('N', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       (String.make 0 ' ')))))))))))))))))))))
  then PredNodesExist (n0::[])
  else warning PredFalse (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('P', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_lE : string -> predGraphEdge list -> fOLPredicateType **)

let fOLLookupPredicate_lE name e =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('A', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       (String.make 0 ' ')))))))))))))))))
  then PredAddEdges e
  else if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('E', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            (String.make 0 ' ')))))))))))))))))))))
       then PredEdgesExist e
       else warning PredFalse
              (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
              (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val fOLLookupPredicate_lN : string -> predGraphNode list -> fOLPredicateType **)

let fOLLookupPredicate_lN name n0 =
  if beq_string name ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       ('N', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       (String.make 0 ' ')))))))))))))))))))))
  then PredNodesExist n0
  else warning PredFalse (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('P', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))::[])))

(** val beq_edge0 : graphEdge -> graphEdge -> bool **)

let beq_edge0 a b =
  let Pair (p, _) = a in
  let Pair (p0, _) = p in
  let Pair (a1, a2) = p0 in
  let Pair (p1, _) = b in
  let Pair (p2, _) = p1 in let Pair (b1, b2) = p2 in if beq_node a1 b1 then beq_node a2 b2 else false

type scenarioTree =
| ScenarioName of string * scenarioTree
| ScenarioAnd of scenarioTree * scenarioTree
| ScenarioOr of scenarioTree * scenarioTree
| ScenarioEdgeLeaf of graphEdge list
| ScenarioNodeLeaf of graphNode list
| ScenarioNotNodeLeaf of graphNode list
| ScenarioTrue
| ScenarioFalse

(** val flipEdgesHelper : graphEdge list -> graphEdge list -> graphEdge list **)

let rec flipEdgesHelper l r =
  match l with
  | [] -> r
  | g::t ->
    let Pair (p, c) = g in
    let Pair (p0, label) = p in
    let Pair (s, d) = p0 in flipEdgesHelper t ((Pair ((Pair ((Pair (d, s)), label)), c))::r)

(** val flipEdges : graphEdge list -> graphEdge list **)

let flipEdges l =
  flipEdgesHelper l []

(** val printLabelsHelper : string list -> string -> string **)

let rec printLabelsHelper l r =
  match l with
  | [] -> r
  | h::t ->
    printLabelsHelper t
      (stringOf (h::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        ('\\', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))::(r::[]))))

(** val printLabels : string list option -> string **)

let printLabels = function
| Some l' -> printLabelsHelper l' (String.make 0 ' ')
| None -> (String.make 0 ' ')

(** val printEdgeLabels : graphEdge list -> string **)

let printEdgeLabels = function
| [] ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    (String.make 0 ' '))
| h::t ->
  fold_left (fun a b ->
    stringOf (a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\\',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))::((shortStringOfGraphEdge b)::[])))) t (shortStringOfGraphEdge h)

(** val printNodeLabels : graphNode list -> string **)

let printNodeLabels = function
| [] ->
   ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
    (String.make 0 ' '))
| h::t ->
  fold_left (fun a b ->
    stringOf (a::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\\',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))::((shortStringOfGraphNode b)::[])))) t (shortStringOfGraphNode h)

(** val scenarioTreeEdgeCountGraphHelper : bool -> scenarioTree -> int -> string list option -> (int, int) prod **)

let rec scenarioTreeEdgeCountGraphHelper ac t id n0 =
  match t with
  | ScenarioName (n'', t') ->
    (match n0 with
     | Some n' -> scenarioTreeEdgeCountGraphHelper ac t' id (Some (n''::n'))
     | None -> scenarioTreeEdgeCountGraphHelper ac t' id (Some (n''::[])))
  | ScenarioAnd (a, b) ->
    let Pair (a_count, a_id) = scenarioTreeEdgeCountGraphHelper ac a id None in
    let Pair (b_count, b_id) = scenarioTreeEdgeCountGraphHelper ac b ((fun x -> x + 1) a_id) None in
    let count = mul a_count b_count in
    let color =
      if if blt_nat ((fun x -> x + 1) 0) a_count then blt_nat ((fun x -> x + 1) 0) b_count else false
      then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             (String.make 0 ' '))))))))))
      else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('k',
             (String.make 0 ' '))))))))))
    in
    let result = Pair (count, ((fun x -> x + 1) b_id)) in
    let result0 =
      println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))))::((stringOfNat ((fun x -> x + 1) b_id))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
        (String.make 0 ' ')))))))))))))))))::((if ac
                                               then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('b',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('o',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('x', (String.make 0 ' '))))))
                                               else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('o',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('v',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('a',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
        (String.make 0 ' ')))))))))))))))::(color::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (';', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
        (String.make 0 ' ')))))))))))))))))::((printLabels n0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        ('A', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
        (String.make 0 ' ')))))))))))))::[])))))))))
    in
    let result1 =
      println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))))::((stringOfNat ((fun x -> x + 1) b_id))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))))))))::((stringOfNat a_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (';', (String.make 0 ' ')))::[])))))
    in
    println result1 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat ((fun x -> x + 1) b_id))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat b_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  | ScenarioOr (a, b) ->
    let Pair (a_count, a_id) = scenarioTreeEdgeCountGraphHelper false a id None in
    let Pair (b_count, b_id) = scenarioTreeEdgeCountGraphHelper false b ((fun x -> x + 1) a_id) None in
    let count = add a_count b_count in
    let result = Pair (count, ((fun x -> x + 1) b_id)) in
    let result0 =
      println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))))::((stringOfNat ((fun x -> x + 1) b_id))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
        (String.make 0 ' ')))))))))))))))))::((if ac
                                               then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('b',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('o',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('x', (String.make 0 ' '))))))
                                               else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('o',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('v',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('a',
                                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                      ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
        (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))::((printLabels n0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        ('O', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
        (String.make 0 ' ')))))))))))::[])))))))
    in
    let result1 =
      println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))))::((stringOfNat ((fun x -> x + 1) b_id))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        (String.make 0 ' ')))))))))))::((stringOfNat a_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
        (';', (String.make 0 ' ')))::[])))))
    in
    println result1 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat ((fun x -> x + 1) b_id))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat b_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  | ScenarioEdgeLeaf l ->
    let result = Pair (((fun x -> x + 1) 0), id) in
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      (String.make 0 ' ')))))))))))))))))::((if ac
                                             then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('b',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('x', (String.make 0 ' '))))))
                                             else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('v',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      (String.make 0 ' ')))))))))))))))))::((printLabels n0)::((stringOfNat (length l))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\\',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))))))))::((printEdgeLabels l)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))::[]))))))))))
  | ScenarioNodeLeaf l ->
    let result = Pair (((fun x -> x + 1) 0), id) in
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      (String.make 0 ' ')))))))))))))))))::((if ac
                                             then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('b',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('x', (String.make 0 ' '))))))
                                             else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('v',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      (String.make 0 ' ')))))))))))))))))::((printLabels n0)::((stringOfNat (length l))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      (String.make 0 ' ')))))))))))))::((printNodeLabels l)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))::[]))))))))))
  | ScenarioNotNodeLeaf l ->
    let result = Pair (((fun x -> x + 1) 0), id) in
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      (String.make 0 ' ')))))))))))))))))::((if ac
                                             then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('b',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('x', (String.make 0 ' '))))))
                                             else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('v',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      (String.make 0 ' ')))))))))))))))))::((printLabels n0)::((stringOfNat (length l))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\\',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\\',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::((printNodeLabels l)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))::[]))))))))))
  | ScenarioTrue ->
    let result = Pair (((fun x -> x + 1) 0), id) in
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      (String.make 0 ' ')))))))))))))))))::((if ac
                                             then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('b',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('x', (String.make 0 ' '))))))
                                             else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('v',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('U',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))))))))))))))))))))))))))::[])))))
  | ScenarioFalse ->
    let result = Pair (((fun x -> x + 1) 0), id) in
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      (String.make 0 ' ')))))))))))))))))::((if ac
                                             then  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('b',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('x', (String.make 0 ' '))))))
                                             else  ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('o',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('v',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('a',
                                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                    ('l', (String.make 0 ' ')))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (',', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))::[])))))

(** val scenarioTreeEdgeCountGraphHelper1 : scenarioTree -> string -> scenarioTree **)

let scenarioTreeEdgeCountGraphHelper1 t n0 =
  let t0 =
    println t (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      (String.make 0 ' ')))))))))))))))))::(n0::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('{',
      (String.make 0 ' ')))))::[])))
  in
  let t1 =
    println t0 (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
      (String.make 0 ' ')))))))))))))))::(n0::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))::[]))))
  in
  let t2 =
    println t1 (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))))))))))))))))))::[]))
  in
  let t3 =
    println t2 (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('k',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
      (String.make 0 ' ')))))))))))))))))))))))::[]))
  in
  let Pair (count, _) = scenarioTreeEdgeCountGraphHelper true t3 0 None in
  println t3 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('}',
    (String.make 0 ' ')))::(newline::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))::((stringOfNat count)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    (String.make 0 ' ')))))))))))))))))))))::(newline::[]))))))

(** val scenarioTreeEdgeCountGraph : int -> scenarioTree -> string -> scenarioTree **)

let scenarioTreeEdgeCountGraph f t n0 =
  if printFlag f then scenarioTreeEdgeCountGraphHelper1 t n0 else t

(** val reducesToTrue : scenarioTree -> bool **)

let rec reducesToTrue = function
| ScenarioName (_, t') -> reducesToTrue t'
| ScenarioAnd (a, b) -> if reducesToTrue a then reducesToTrue b else false
| ScenarioOr (a, b) -> if reducesToTrue a then true else reducesToTrue b
| ScenarioEdgeLeaf l ->
  (match l with
   | [] -> true
   | _::_ -> false)
| ScenarioNodeLeaf l ->
  (match l with
   | [] -> true
   | _::_ -> false)
| ScenarioTrue -> true
| _ -> false

(** val reducesToFalse : scenarioTree -> bool **)

let rec reducesToFalse = function
| ScenarioName (_, t') -> reducesToFalse t'
| ScenarioAnd (a, b) -> if reducesToFalse a then true else reducesToFalse b
| ScenarioOr (a, b) -> if reducesToFalse a then reducesToFalse b else false
| ScenarioNotNodeLeaf l ->
  (match l with
   | [] -> true
   | _::_ -> false)
| ScenarioFalse -> true
| _ -> false

(** val simplifyScenarioTree : scenarioTree -> scenarioTree **)

let rec simplifyScenarioTree t = match t with
| ScenarioName (n0, t') ->
  (match simplifyScenarioTree t' with
   | ScenarioTrue -> ScenarioTrue
   | ScenarioFalse -> ScenarioFalse
   | x -> ScenarioName (n0, x))
| ScenarioAnd (a, b) ->
  let a' = simplifyScenarioTree a in
  let b' = simplifyScenarioTree b in
  if reducesToFalse a'
  then ScenarioFalse
  else if reducesToFalse b'
       then ScenarioFalse
       else if reducesToTrue a' then b' else if reducesToTrue b' then a' else ScenarioAnd (a', b')
| ScenarioOr (a, b) ->
  let a' = simplifyScenarioTree a in
  let b' = simplifyScenarioTree b in
  if reducesToTrue a'
  then ScenarioTrue
  else if reducesToTrue b'
       then ScenarioTrue
       else if reducesToFalse a' then b' else if reducesToFalse b' then a' else ScenarioOr (a', b')
| ScenarioEdgeLeaf l ->
  (match l with
   | [] -> ScenarioTrue
   | _::_ -> t)
| ScenarioNodeLeaf l ->
  (match l with
   | [] -> ScenarioTrue
   | _::_ -> t)
| ScenarioNotNodeLeaf l ->
  (match l with
   | [] -> ScenarioFalse
   | _::_ -> t)
| _ -> t

(** val guaranteedEdges : scenarioTree -> ((graphNode list, graphNode list) prod, graphEdge list) prod **)

let rec guaranteedEdges = function
| ScenarioName (_, s0) -> guaranteedEdges s0
| ScenarioAnd (a, b) ->
  let p = guaranteedEdges a in
  let p0 = guaranteedEdges b in
  let Pair (p1, a3) = p in
  let Pair (a1, a2) = p1 in
  let Pair (p2, b3) = p0 in
  let Pair (b1, b2) = p2 in Pair ((Pair ((app_rev a1 b1), (app_rev a2 b2))), (app_rev a3 b3))
| ScenarioEdgeLeaf l -> Pair ((Pair ([], [])), l)
| ScenarioNodeLeaf l -> Pair ((Pair (l, [])), [])
| ScenarioNotNodeLeaf l -> Pair ((Pair ([], l)), [])
| ScenarioFalse ->
  warning (Pair ((Pair ([], [])), []))
    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\'',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('G',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
| _ -> Pair ((Pair ([], [])), [])

(** val findBranchingEdges : scenarioTree -> graphEdge list list option **)

let rec findBranchingEdges = function
| ScenarioName (_, s0) -> findBranchingEdges s0
| ScenarioAnd (a, b) ->
  (match findBranchingEdges a with
   | Some a' ->
     (match a' with
      | [] -> Some a'
      | a1::l ->
        (match l with
         | [] ->
           (match findBranchingEdges b with
            | Some b' ->
              (match b' with
               | [] -> Some b'
               | b1::l0 ->
                 (match l0 with
                  | [] -> Some ((app_rev a1 b1)::[])
                  | _::_ -> Some b'))
            | None -> Some (a1::[]))
         | _::_ -> Some a'))
   | None -> findBranchingEdges b)
| ScenarioOr (a, b) ->
  (match findBranchingEdges a with
   | Some l ->
     (match l with
      | [] ->
        (match findBranchingEdges b with
         | Some l' ->
           (match l' with
            | [] -> Some (app_rev l l')
            | l'0::l0 ->
              (match l0 with
               | [] -> Some (l'0::l)
               | _::_ -> Some (app_rev l l')))
         | None -> Some l)
      | l0::l1 ->
        (match l1 with
         | [] ->
           (match findBranchingEdges b with
            | Some l' ->
              (match l' with
               | [] -> Some (l0::l')
               | l'0::l2 ->
                 (match l2 with
                  | [] -> Some (l0::(l'0::[]))
                  | _::_ -> Some (l0::l')))
            | None -> Some (l0::[]))
         | _::_ ->
           (match findBranchingEdges b with
            | Some l' ->
              (match l' with
               | [] -> Some (app_rev l l')
               | l'0::l2 ->
                 (match l2 with
                  | [] -> Some (l'0::l)
                  | _::_ -> Some (app_rev l l')))
            | None -> Some l)))
   | None -> None)
| ScenarioEdgeLeaf l ->
  (match l with
   | [] -> None
   | _::_ -> Some (l::[]))
| ScenarioNodeLeaf _ -> Some []
| ScenarioNotNodeLeaf _ -> Some []
| _ -> None

type fOLTerm =
| IntTerm of string * int
| StageNameTerm of string * int
| MicroopTerm of string * microop
| NodeTerm of string * graphNode
| EdgeTerm of string * graphEdge
| MacroArgTerm of string * stringOrInt

(** val fOLTermName : fOLTerm -> string **)

let fOLTermName = function
| IntTerm (n0, _) -> n0
| StageNameTerm (n0, _) -> n0
| MicroopTerm (n0, _) -> n0
| NodeTerm (n0, _) -> n0
| EdgeTerm (n0, _) -> n0
| MacroArgTerm (n0, _) -> n0

(** val addTerm : fOLTerm list -> fOLTerm -> fOLTerm list **)

let addTerm l t =
  match find (fun x -> beq_string (fOLTermName x) (fOLTermName t)) l with
  | Some _ ->
    warning (t::l) (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('w',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\'',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))::((fOLTermName t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('\'', (String.make 0 ' ')))::[])))
  | None -> t::l

(** val stringOfFOLTermValue : fOLTerm -> string **)

let stringOfFOLTermValue = function
| IntTerm (_, n0) -> stringOfNat n0
| StageNameTerm (_, n0) -> stringOfNat n0
| MicroopTerm (_, uop) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))::((stringOfNat uop.globalID)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfNat uop.coreID)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ',
    (String.make 0 ' ')))::((stringOfNat uop.threadID0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', (String.make 0 ' ')))::((stringOfNat uop.intraInstructionID0)::[]))))))))
| NodeTerm (_, n0) -> graphvizShortStringOfGraphNode n0
| EdgeTerm (_, e) -> stringOfGraphEdge e
| MacroArgTerm (_, n0) -> stringOfSoI n0

(** val stringOfFOLTerm : fOLTerm -> string **)

let stringOfFOLTerm t =
  stringOf
    ((fOLTermName t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))))))))::((stringOfFOLTermValue t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (')', (String.make 0 ' ')))::[]))))

(** val getFOLTermHelper : string -> fOLTerm list -> int -> fOLTerm option **)

let rec getFOLTermHelper name l depth =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
    (fun d ->
    match l with
    | [] ->
      warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
        (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(name::[]))
    | h::t ->
      (match h with
       | StageNameTerm (s, n0) -> if beq_string s name then Some (IntTerm (s, n0)) else getFOLTermHelper name t d
       | MacroArgTerm (s1, s2) ->
         (match s2 with
          | SoIString s2' ->
            if beq_string name s1
            then if beq_string s1 s2' then getFOLTermHelper name t d else getFOLTermHelper s2' t d
            else getFOLTermHelper name t d
          | SoIInt n0 -> if beq_string s1 name then Some (IntTerm (name, n0)) else getFOLTermHelper name t d
          | _ ->
            warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              ('U', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
       | _ -> if beq_string (fOLTermName h) name then Some h else getFOLTermHelper name t d))
    depth

(** val getFOLTerm : string -> fOLTerm list -> fOLTerm option **)

let getFOLTerm name l =
  let result =
    getFOLTermHelper name l ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)

  in
  (match result with
   | Some r ->
     if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
          ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))
     then comment result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('G', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            (String.make 0 ' ')))))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            (String.make 0 ' ')))))))))))))))))))))::((stringOfFOLTerm r)::[]))))
     else result
   | None ->
     if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
          ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))
     then comment result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('G', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            (String.make 0 ' ')))))))))))))))))))))))::(name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            (String.make 0 ' ')))))))))))))))))))))))))))))::[])))
     else result)

type fOLState = { stateNodes : graphNode list; stateNotNodes : graphNode list; stateEdgeNodes : graphNode list;
                  stateEdges : graphEdge list; stateUops : microop list; stateInitial : boundaryCondition list;
                  stateFinal : boundaryCondition list; stateArchEdges : architectureLevelEdge list }

(** val stateNodes : fOLState -> graphNode list **)

let stateNodes x = x.stateNodes

(** val stateNotNodes : fOLState -> graphNode list **)

let stateNotNodes x = x.stateNotNodes

(** val stateEdgeNodes : fOLState -> graphNode list **)

let stateEdgeNodes x = x.stateEdgeNodes

(** val stateEdges : fOLState -> graphEdge list **)

let stateEdges x = x.stateEdges

(** val stateUops : fOLState -> microop list **)

let stateUops x = x.stateUops

(** val stateInitial : fOLState -> boundaryCondition list **)

let stateInitial x = x.stateInitial

(** val stateFinal : fOLState -> boundaryCondition list **)

let stateFinal x = x.stateFinal

(** val stateArchEdges : fOLState -> architectureLevelEdge list **)

let stateArchEdges x = x.stateArchEdges

(** val updateFOLState : bool -> fOLState -> graphEdge list -> fOLState **)

let updateFOLState check_dups s l1 =
  let f = fun a b ->
    match find (beq_edge0 b) a with
    | Some _ -> a
    | None -> b::a
  in
  let new_edges = if check_dups then fold_left f l1 s.stateEdges else app_rev s.stateEdges l1 in
  let new_nodes = nodesFromEdges new_edges in
  { stateNodes = s.stateNodes; stateNotNodes = s.stateNotNodes; stateEdgeNodes = new_nodes; stateEdges = new_edges;
  stateUops = s.stateUops; stateInitial = s.stateInitial; stateFinal = s.stateFinal; stateArchEdges =
  s.stateArchEdges }

(** val fOLStateReplaceEdges : fOLState -> graphNode list -> graphNode list -> graphEdge list -> fOLState **)

let fOLStateReplaceEdges s n0 n' l =
  let nodes = nodesFromEdges l in
  { stateNodes = n0; stateNotNodes = n'; stateEdgeNodes = nodes; stateEdges = l; stateUops = s.stateUops;
  stateInitial = s.stateInitial; stateFinal = s.stateFinal; stateArchEdges = s.stateArchEdges }

(** val getSoIFOLTerm : stringOrInt -> fOLTerm list -> fOLTerm option **)

let rec getSoIFOLTerm t l =
  let result =
    match t with
    | SoISum (a, b) ->
      let o = getSoIFOLTerm a l in
      let o0 = getSoIFOLTerm b l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, a') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, b') -> Some (IntTerm ((String.make 0 ' '), (add a' b')))
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | SoIString s -> getFOLTerm s l
    | SoIInt n0 -> Some (IntTerm ((String.make 0 ' '), n0))
    | SoICoreID s ->
      (match getFOLTerm s l with
       | Some f ->
         (match f with
          | MicroopTerm (_, uop) -> Some (IntTerm ((String.make 0 ' '), uop.coreID))
          | _ -> None)
       | None -> None)
  in
  (match result with
   | Some r ->
     if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
          ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))
     then comment result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('G', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            (String.make 0 ' ')))))))))))))))))))))))))))))::((stringOfSoI t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            (String.make 0 ' ')))))))))))))))))))))::((stringOfFOLTerm r)::[]))))
     else result
   | None ->
     if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
          ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))
     then comment result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('G', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            (String.make 0 ' ')))))))))))))))))))))))))))))::((stringOfSoI t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
            (String.make 0 ' ')))))))))))))))))))))))))))))::[])))
     else result)

(** val foldInstantiateGraphEdge :
    fOLState -> fOLTerm list -> graphEdge list option -> predGraphEdge -> graphEdge list option **)

let rec foldInstantiateGraphEdge _ l r = function
| Pair (p, color) ->
  let Pair (p0, label) = p in
  let Pair (p1, p2) = p0 in
  let Pair (uop1name, p3) = p1 in
  let Pair (p4, l1) = p3 in
  let Pair (uop2name, p5) = p2 in
  let Pair (p6, l2) = p5 in
  let p7 = Pair ((Pair ((Pair ((Pair ((getFOLTerm uop1name l), (getFOLTerm uop2name l))), (getSoIFOLTerm p4 l))),
    (getSoIFOLTerm p6 l))), (getSoIFOLTerm l1 l))
  in
  let o = getSoIFOLTerm l2 l in
  let Pair (p8, o0) = p7 in
  let Pair (p9, o1) = p8 in
  let Pair (p10, o2) = p9 in
  let Pair (o3, o4) = p10 in
  (match o3 with
   | Some f ->
     (match f with
      | MicroopTerm (_, uop1) ->
        (match o4 with
         | Some f0 ->
           (match f0 with
            | MicroopTerm (_, uop2) ->
              (match o2 with
               | Some f1 ->
                 (match f1 with
                  | IntTerm (_, p1') ->
                    (match o1 with
                     | Some f2 ->
                       (match f2 with
                        | IntTerm (_, p2') ->
                          (match o0 with
                           | Some f3 ->
                             (match f3 with
                              | IntTerm (_, l1') ->
                                (match o with
                                 | Some f4 ->
                                   (match f4 with
                                    | IntTerm (_, l2') ->
                                      let e0 = Pair ((Pair ((Pair ((Pair (uop1, (Pair (p1', l1')))), (Pair (uop2,
                                        (Pair (p2', l2')))))), label)), color)
                                      in
                                      (match r with
                                       | Some r' -> Some (e0::r')
                                       | None -> None)
                                    | _ ->
                                      warning None
                                        (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('C',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('o',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('u',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('l',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('d',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('n',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('o',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('t',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('f',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('i',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('n',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('d',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('m',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('i',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('c',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('r',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('o',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('o',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('p',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('t',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('e',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('r',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('m',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('s',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ',
                                        (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('a',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('n',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('d',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('/',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('o',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        ('r',
                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                        (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
                                 | None ->
                                   warning None
                                     (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('C',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('o',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('u',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('l',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('d',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('n',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('o',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('t',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('f',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('i',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('n',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('d',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('m',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('i',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('c',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('r',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('o',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('o',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('p',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('t',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('e',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('r',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('m',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('s',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ',
                                     (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('a',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('n',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('d',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('/',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('o',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     ('r',
                                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                     (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
                              | _ ->
                                warning None
                                  (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('C',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('o',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('u',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('l',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('d',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('n',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('o',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('t',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('f',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('i',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('n',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('d',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('m',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('i',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('c',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('r',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('o',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('o',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('p',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('t',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('e',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('r',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('m',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('s',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ',
                                  (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('a',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('n',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('d',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('/',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('o',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  ('r',
                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                  (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
                           | None ->
                             warning None
                               (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('C',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('u',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('l',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('t',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('f',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('m',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('p',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('t',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('m',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('s',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('a',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('/',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
                        | _ ->
                          warning None
                            (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('C',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('u',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('l',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('d',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('t',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('f',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('d',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('m',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('p',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('t',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('m',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('s',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('a',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('d',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('/',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
                     | None ->
                       warning None
                         (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('C',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('u',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('l',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('d',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('t',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('f',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('d',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('m',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('c',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('r',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('p',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('t',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('e',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('r',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('m',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('s',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('a',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('d',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('/',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('r',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
                  | _ ->
                    warning None
                      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('C',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('u',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('l',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('d',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('f',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('d',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('m',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('c',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('p',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('m',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('s',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('d',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('/',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
               | None ->
                 warning None
                   (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                   (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
            | _ ->
              warning None
                (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                (' ', (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
         | None ->
           warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
             ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
             (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
      | _ ->
        warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
          ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
          (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))
   | None ->
     warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(uop1name::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
       (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       (String.make 0 ' ')))))))))))))))))::(uop2name::[])))))

(** val foldInstantiateGraphNode :
    fOLState -> fOLTerm list -> graphNode list option -> predGraphNode -> graphNode list option **)

let rec foldInstantiateGraphNode _ l r = function
| Pair (uopname, p) ->
  let Pair (p1, l1) = p in
  let p0 = Pair ((getFOLTerm uopname l), (getSoIFOLTerm p1 l)) in
  let o = getSoIFOLTerm l1 l in
  let Pair (o0, o1) = p0 in
  (match o0 with
   | Some f ->
     (match f with
      | MicroopTerm (_, uop) ->
        (match o1 with
         | Some f0 ->
           (match f0 with
            | IntTerm (_, p') ->
              (match o with
               | Some f1 ->
                 (match f1 with
                  | IntTerm (_, l') ->
                    let n1 = Pair (uop, (Pair (p', l'))) in
                    (match r with
                     | Some r' -> Some (n1::r')
                     | None -> None)
                  | _ ->
                    warning None
                      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('C',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('u',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('l',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('d',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('f',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('d',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('m',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(uopname::[])))
               | None ->
                 warning None
                   (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(uopname::[])))
            | _ ->
              warning None
                (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(uopname::[])))
         | None ->
           warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
             ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(uopname::[])))
      | _ ->
        warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
          ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
          (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(uopname::[])))
   | None ->
     warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
       (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::(uopname::[])))

(** val getInitialCondition : boundaryCondition list -> physicalAddress -> data **)

let rec getInitialCondition conditions pa =
  match conditions with
  | [] ->
    let result = NormalData 0 in
    if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
         ((fun x -> x + 1) 0))))))
    then comment result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('U', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('0',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(
           (graphvizStringOfPhysicalAddress pa)::[]))
    else result
  | b::t -> let Pair (a, d) = b in if beq_paddr a pa then d else getInitialCondition t pa

(** val getFinalCondition : boundaryCondition list -> physicalAddress -> data option **)

let rec getFinalCondition conditions pa =
  match conditions with
  | [] -> None
  | b::t -> let Pair (a, d) = b in if beq_paddr a pa then Some d else getFinalCondition t pa

(** val hasDependency : architectureLevelEdge list -> int -> int -> string -> bool **)

let rec hasDependency l src dst label =
  match l with
  | [] -> false
  | a::t ->
    let Pair (p, h3) = a in
    let Pair (h1, h2) = p in
    if if if Nat.eqb h1 src then Nat.eqb h2 dst else false then beq_string label h3 else false
    then true
    else hasDependency t src dst label

(** val evaluatePredicate :
    string list list -> fOLPredicateType -> fOLTerm list -> fOLState -> (graphNode list, graphEdge list) prod option **)

let evaluatePredicate _ p l s =
  let result =
    match p with
    | PredDebug _ -> Some (Pair ([], []))
    | PredHasDependency (a, b, c) ->
      let o = getFOLTerm b l in
      let o0 = getFOLTerm c l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, b') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, c') ->
                  if hasDependency s.stateArchEdges b'.globalID c'.globalID a then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredIsRead t ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            (match t'.access with
             | Read (_, _, _, _) -> Some (Pair ([], []))
             | _ -> None)
          | _ -> None)
       | None -> None)
    | PredIsWrite t ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            (match t'.access with
             | Read (_, _, _, _) -> None
             | Write (_, _, _, _) -> Some (Pair ([], []))
             | _ -> None)
          | _ -> None)
       | None -> None)
    | PredIsAPICAccess (n0, t) ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            (match t'.access with
             | Read (_, _, p0, _) ->
               let { ptag = ptag0; pindex = _ } = p0 in
               (match ptag0 with
                | APICTag (s', _) -> if beq_string n0 s' then Some (Pair ([], [])) else None
                | _ -> None)
             | Write (_, _, p0, _) ->
               let { ptag = ptag0; pindex = _ } = p0 in
               (match ptag0 with
                | APICTag (s', _) -> if beq_string n0 s' then Some (Pair ([], [])) else None
                | _ -> None)
             | _ -> None)
          | _ -> None)
       | None -> None)
    | PredIsFence t ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            (match t'.access with
             | Fence _ -> Some (Pair ([], []))
             | FenceVA (_, _) -> Some (Pair ([], []))
             | _ -> None)
          | _ -> None)
       | None -> None)
    | PredAccessType (t1, t2) ->
      (match getFOLTerm t2 l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t2') ->
            (match t2'.access with
             | Read (t1', _, _, _) -> if find_string t1 t1' then Some (Pair ([], [])) else None
             | Write (t1', _, _, _) -> if find_string t1 t1' then Some (Pair ([], [])) else None
             | Fence t1' -> if find_string t1 t1' then Some (Pair ([], [])) else None
             | FenceVA (t1', _) -> if find_string t1 t1' then Some (Pair ([], [])) else None)
          | _ -> None)
       | None -> None)
    | PredSameUop (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if beq_uop t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSameNode (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | NodeTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | NodeTerm (_, t2') -> if beq_node t1' t2' then Some (Pair ([], [])) else None
                | EdgeTerm (_, _) -> None
                | MacroArgTerm (_, _) -> None
                | _ -> None)
             | None -> None)
          | EdgeTerm (_, _) -> None
          | MacroArgTerm (_, _) -> None
          | _ -> None)
       | None -> None)
    | PredSameCore (t1, t2) ->
      let o = getSoIFOLTerm t1 l in
      let o0 = getSoIFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, t2') -> if Nat.eqb t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if Nat.eqb t1'.coreID t2'.coreID then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSmallerGlobalID (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if blt_nat t1'.globalID t2'.globalID then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSameGlobalID (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if Nat.eqb t1'.globalID t2'.globalID then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSameIntraInstID (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') ->
                  if Nat.eqb t1'.intraInstructionID0 t2'.intraInstructionID0 then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSameThread (t1, t2) ->
      let o = getSoIFOLTerm t1 l in
      let o0 = getSoIFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, t2') -> if Nat.eqb t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if Nat.eqb t1'.coreID t2'.coreID then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredOnCore (t1, t2) ->
      let o = getSoIFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) ->
                  warning None
                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('u', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('f', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('m', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ',
                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', (String.make 0 ' ')))))))))))))))))::(t2::[]))))
                | StageNameTerm (_, _) ->
                  warning None
                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('u', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('f', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('m', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ',
                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', (String.make 0 ' ')))))))))))))))))::(t2::[]))))
                | MicroopTerm (_, t2') -> if Nat.eqb t1' t2'.coreID then Some (Pair ([], [])) else None
                | _ ->
                  warning None
                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('u', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('f', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('m', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ',
                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', (String.make 0 ' ')))))))))))))))))::(t2::[])))))
             | None ->
               warning None
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', (String.make 0 ' ')))))))))))))))))::(t2::[])))))
          | _ ->
            warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              (String.make 0 ' ')))))))))))))))))::(t2::[])))))
       | None ->
         warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           (String.make 0 ' ')))))))))))))))))::(t2::[])))))
    | PredOnThread (t1, t2) ->
      let o = getSoIFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) ->
                  warning None
                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('u', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('f', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('m', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ',
                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', (String.make 0 ' ')))))))))))))))))::(t2::[]))))
                | StageNameTerm (_, _) ->
                  warning None
                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('u', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('f', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('m', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ',
                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', (String.make 0 ' ')))))))))))))))))::(t2::[]))))
                | MicroopTerm (_, t2') -> if Nat.eqb t1' t2'.threadID0 then Some (Pair ([], [])) else None
                | _ ->
                  warning None
                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('u', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('l', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('f', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('i', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('t', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('e', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('m', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ',
                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                    (' ', (String.make 0 ' ')))))))))))))))))::(t2::[])))))
             | None ->
               warning None
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('a', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('n', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('d', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('o', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 ('r', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                 (' ', (String.make 0 ' ')))))))))))))))))::(t2::[])))))
          | _ ->
            warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
              (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              (String.make 0 ' ')))))))))))))))))::(t2::[])))))
       | None ->
         warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('C', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))::((stringOfSoI t1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           (String.make 0 ' ')))))))))))))))))::(t2::[])))))
    | PredSameVirtualAddress (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if sameVirtualAddress t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSamePhysicalAddress (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if samePhysicalAddress t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSameVirtualTag (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if sameVirtualTag t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSamePhysicalTag (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if samePhysicalTag t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSameIndex (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if sameIndex t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredKnownData t1 ->
      (match getFOLTerm t1 l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match t1'.access with
             | Read (_, _, _, d) ->
               (match d with
                | UnknownData -> None
                | NormalData _ -> Some (Pair ([], []))
                | PageTableEntry (_, _, _) -> Some (Pair ([], []))
                | OtherData (_, _) -> Some (Pair ([], [])))
             | Write (_, _, _, _) -> Some (Pair ([], []))
             | Fence _ -> Some (Pair ([], []))
             | FenceVA (_, _) -> Some (Pair ([], [])))
          | _ -> None)
       | None -> None)
    | PredSameData (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') -> if sameData t1' t2' then Some (Pair ([], [])) else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredDataFromPAInitial t ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            let o = getData t' in
            let o0 = getPhysicalAddress t' in
            (match o with
             | Some d ->
               (match o0 with
                | Some pa ->
                  if beq_data d (getInitialCondition s.stateInitial pa) then Some (Pair ([], [])) else None
                | None -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredDataFromPAFinal t ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            let o = getData t' in
            let o0 = getPhysicalAddress t' in
            (match o with
             | Some d ->
               (match o0 with
                | Some pa ->
                  (match getFinalCondition s.stateFinal pa with
                   | Some d' -> if beq_data d d' then Some (Pair ([], [])) else None
                   | None -> None)
                | None -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredSamePAasPTEforVA (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') ->
                  let o1 = getPhysicalAddress t1' in
                  let o2 = getVirtualTag t2' in
                  (match o1 with
                   | Some p1 ->
                     (match o2 with
                      | Some v2 ->
                        if beq_paddr p1 { ptag = (PTETag v2); pindex = 0 } then Some (Pair ([], [])) else None
                      | None -> None)
                   | None -> None)
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredDataIsCorrectTranslation (a', d', t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') ->
                  let p0 = Pair ((getData t1'), (getVirtualTag t2')) in
                  let o1 = getPhysicalTag t2' in
                  let Pair (o2, o3) = p0 in
                  (match o2 with
                   | Some d ->
                     (match o3 with
                      | Some v ->
                        (match o1 with
                         | Some p1 -> if beq_pte d v p1 a' d' then Some (Pair ([], [])) else None
                         | None -> None)
                      | None -> None)
                   | None -> None)
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredTranslationMatchesInitialState (a', d', t) ->
      (match getFOLTerm t l with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t') ->
            let o = getVirtualTag t' in
            let o0 = getPhysicalTag t' in
            (match o with
             | Some v ->
               (match o0 with
                | Some p0 ->
                  let ic = getInitialCondition s.stateInitial { ptag = (PTETag v); pindex = 0 } in
                  if beq_pte ic v p0 a' d' then Some (Pair ([], [])) else None
                | None -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredProgramOrder (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, b') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, c') ->
                  if hasDependency s.stateArchEdges b'.globalID c'.globalID
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('p',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o', (String.make 0 ' ')))))
                  then Some (Pair ([], []))
                  else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredConsec (t1, t2) ->
      let o = getFOLTerm t1 l in
      let o0 = getFOLTerm t2 l in
      (match o with
       | Some f ->
         (match f with
          | IntTerm (_, _) -> None
          | StageNameTerm (_, _) -> None
          | MicroopTerm (_, t1') ->
            (match o0 with
             | Some f0 ->
               (match f0 with
                | IntTerm (_, _) -> None
                | StageNameTerm (_, _) -> None
                | MicroopTerm (_, t2') ->
                  if if Nat.eqb ((fun x -> x + 1) t1'.globalID) t2'.globalID
                     then if Nat.eqb t1'.threadID0 t2'.threadID0 then Nat.eqb t1'.coreID t2'.coreID else false
                     else false
                  then Some (Pair ([], []))
                  else None
                | _ -> None)
             | None -> None)
          | _ -> None)
       | None -> None)
    | PredAddEdges e ->
      (match fold_left (foldInstantiateGraphEdge s l) e (Some []) with
       | Some l' -> Some (Pair ([], l'))
       | None -> None)
    | PredEdgesExist e ->
      (match fold_left (foldInstantiateGraphEdge s l) e (Some []) with
       | Some l' -> Some (Pair ([], l'))
       | None -> None)
    | PredNodesExist n0 ->
      (match fold_left (foldInstantiateGraphNode s l) n0 (Some []) with
       | Some l' -> Some (Pair (l', []))
       | None -> None)
    | PredTrue -> Some (Pair ([], []))
    | PredFalse -> None
    | PredHasID (g, c, t, i, n0) ->
      (match getFOLTerm n0 l with
       | Some f ->
         (match f with
          | MicroopTerm (_, uop) ->
            let { globalID = g'; coreID = c'; threadID0 = t'; intraInstructionID0 = i'; access = _ } = uop in
            if if if Nat.eqb g g' then Nat.eqb c c' else false
               then if Nat.eqb t t' then Nat.eqb i i' else false
               else false
            then Some (Pair ([], []))
            else None
          | _ -> None)
       | None -> None)
    | PredHasGlobalID (g, n0) ->
      (match getFOLTerm n0 l with
       | Some f ->
         (match f with
          | MicroopTerm (_, uop) ->
            let { globalID = g'; coreID = _; threadID0 = _; intraInstructionID0 = _; access = _ } = uop in
            if Nat.eqb g g' then Some (Pair ([], [])) else None
          | _ -> None)
       | None -> None)
  in
  if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
       ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))))))))
  then comment result
         (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::((stringOfPredicate false p)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))))))))))))::((match result with
                                                    | Some p0 ->
                                                      let Pair (l1, l2) = p0 in
                                                      stringOf
                                                        (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('s',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('a',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('t',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('(',
                                                        (String.make 0 ' ')))))))))::((stringOfNat (length l1))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        (' ',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('n',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('o',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('d',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('e',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('s',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        (',',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        (' ',
                                                        (String.make 0 ' ')))))))))))))))))::((stringOfNat
                                                                                                (length l2))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        (' ',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('e',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('d',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('g',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('e',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('s',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        (')', (String.make 0 ' ')))))))))))))))::[])))))
                                                    | None ->
                                                       ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('u',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('n',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('s',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('a',
                                                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                        ('t', (String.make 0 ' ')))))))))))::[])))))
  else result

type fOLQuantifier = fOLState -> fOLTerm list -> (string, fOLTerm list) prod

(** val microopQuantifier : string -> fOLQuantifier **)

let microopQuantifier name s _ =
  let uops = s.stateUops in Pair (name, (map (fun x -> MicroopTerm (name, x)) uops))

(** val numCores : microop list -> int -> int **)

let rec numCores l n0 =
  match l with
  | [] -> n0
  | h::t -> numCores t (max n0 ((fun x -> x + 1) h.coreID))

(** val coreQuantifier : string -> fOLQuantifier **)

let coreQuantifier name s _ =
  let cores = numCores s.stateUops 0 in Pair (name, (map (fun x -> IntTerm (name, x)) (range cores)))

(** val numThreads : microop list -> int -> int **)

let rec numThreads l n0 =
  match l with
  | [] -> n0
  | h::t -> numThreads t (max n0 ((fun x -> x + 1) h.threadID0))

(** val threadQuantifier : string -> fOLQuantifier **)

let threadQuantifier name s _ =
  let cores = numThreads s.stateUops 0 in Pair (name, (map (fun x -> IntTerm (name, x)) (range cores)))

type fOLFormula =
| FOLName of string * fOLFormula
| FOLExpandMacro of string * stringOrInt list
| FOLPredicate of fOLPredicateType
| FOLNot of fOLFormula
| FOLOr of fOLFormula * fOLFormula
| FOLAnd of fOLFormula * fOLFormula
| FOLForAll of fOLQuantifier * fOLFormula
| FOLExists of fOLQuantifier * fOLFormula
| FOLLet of fOLTerm * fOLFormula

(** val printGraphvizStringOfFOLFormulaHelper : int -> fOLFormula -> int **)

let rec printGraphvizStringOfFOLFormulaHelper id = function
| FOLName (s, f') ->
  let id' = printGraphvizStringOfFOLFormulaHelper id f' in
  let result = (fun x -> x + 1) id' in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat id')::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(s::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))::[])))))
| FOLExpandMacro (s, _) ->
  println id (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    (String.make 0 ' ')))))))))))))))))))::(s::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))::[])))))
| FOLPredicate p ->
  println id (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    (String.make 0 ' ')))))))))))))))))))::((stringOfPredicate true p)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))::[])))))
| FOLNot f' ->
  let id' = printGraphvizStringOfFOLFormulaHelper id f' in
  let result = (fun x -> x + 1) id' in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat id')::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))))))::[])))
| FOLOr (a, b) ->
  let a_id = printGraphvizStringOfFOLFormulaHelper id a in
  let b_id = printGraphvizStringOfFOLFormulaHelper ((fun x -> x + 1) a_id) b in
  let result = (fun x -> x + 1) b_id in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat a_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  let result1 =
    println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat b_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result1 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))))::[])))
| FOLAnd (a, b) ->
  let a_id = printGraphvizStringOfFOLFormulaHelper id a in
  let b_id = printGraphvizStringOfFOLFormulaHelper ((fun x -> x + 1) a_id) b in
  let result = (fun x -> x + 1) b_id in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat a_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  let result1 =
    println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat b_id)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result1 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))))))::[])))
| FOLForAll (_, f') ->
  let id' = printGraphvizStringOfFOLFormulaHelper id f' in
  let result = (fun x -> x + 1) id' in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat id')::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))::[])))
| FOLExists (_, f') ->
  let id' = printGraphvizStringOfFOLFormulaHelper id f' in
  let result = (fun x -> x + 1) id' in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat id')::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('.',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))::[])))
| FOLLet (t, f') ->
  let id' = printGraphvizStringOfFOLFormulaHelper id f' in
  let result = (fun x -> x + 1) id' in
  let result0 =
    println result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('>',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      (String.make 0 ' ')))))))))))::((stringOfNat id')::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (';', (String.make 0 ' ')))::[])))))
  in
  println result0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    (String.make 0 ' ')))))))::((stringOfNat result0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('[',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('"',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::((stringOfFOLTerm t)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('"', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (']',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
    (String.make 0 ' ')))))))::[])))))

(** val printGraphvizStringOfFOLFormula : fOLFormula -> fOLFormula **)

let printGraphvizStringOfFOLFormula f =
  if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))))
  then let f0 =
         println f (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('{',
           (String.make 0 ' ')))))))))))))))))))))))))))))))))::[])
       in
       let f1 =
         println f0
           (tab::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('=',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (';',
           (String.make 0 ' ')))))))))))))))))))))))::[]))
       in
       let result = printGraphvizStringOfFOLFormulaHelper 0 f1 in
       println f1 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('}',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         (String.make 0 ' ')))))))))))::((stringOfNat result)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         (String.make 0 ' ')))))))))))))::(newline::[]))))
  else f

(** val fOLImplies : fOLFormula -> fOLFormula -> fOLFormula **)

let fOLImplies a b =
  FOLOr ((FOLNot a), b)

(** val fOLIff : fOLFormula -> fOLFormula -> fOLFormula **)

let fOLIff a b =
  FOLAnd ((fOLImplies a b), (fOLImplies b a))

(** val foldFlipEdge : scenarioTree -> graphEdge -> scenarioTree **)

let foldFlipEdge t = function
| Pair (p, c) ->
  let Pair (p0, l) = p in
  let Pair (s, d) = p0 in
  let l' =
    if string_prefix ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('N', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
         (String.make 0 ' '))))))))) l
    then substr ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))) l
    else append ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
           (String.make 0 ' '))))))))) l
  in
  if beq_node s d
  then ScenarioOr (t, ScenarioTrue)
  else ScenarioOr (t, (ScenarioOr ((ScenarioOr ((ScenarioNotNodeLeaf (s::[])), (ScenarioNotNodeLeaf (d::[])))),
         (ScenarioEdgeLeaf ((Pair ((Pair ((Pair (d, s)), l')), c))::[])))))

(** val foldFlipNode : scenarioTree -> graphNode -> scenarioTree **)

let foldFlipNode t n0 =
  ScenarioOr (t, (ScenarioNotNodeLeaf (n0::[])))

(** val eliminateQuantifiersHelper :
    bool -> string list list -> fOLState -> fOLFormula -> fOLTerm list -> scenarioTree **)

let rec eliminateQuantifiersHelper demorgan stage_names s f l =
  match f with
  | FOLName (n0, f0) -> ScenarioName (n0, (eliminateQuantifiersHelper demorgan stage_names s f0 l))
  | FOLExpandMacro (m, _) ->
    warning ScenarioFalse
      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))::(m::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])))
  | FOLPredicate p ->
    let o = evaluatePredicate stage_names p l s in
    if demorgan
    then (match o with
          | Some p0 ->
            let Pair (l1, l2) = p0 in
            let n0 = fold_left foldFlipNode l1 ScenarioFalse in
            let e = fold_left foldFlipEdge l2 ScenarioFalse in ScenarioOr (n0, e)
          | None -> ScenarioTrue)
    else (match o with
          | Some p0 -> let Pair (l1, l2) = p0 in ScenarioAnd ((ScenarioNodeLeaf l1), (ScenarioEdgeLeaf l2))
          | None -> ScenarioFalse)
  | FOLNot f' -> eliminateQuantifiersHelper (negb demorgan) stage_names s f' l
  | FOLOr (a, b) ->
    if demorgan
    then (match eliminateQuantifiersHelper demorgan stage_names s a l with
          | ScenarioTrue -> eliminateQuantifiersHelper demorgan stage_names s b l
          | ScenarioFalse -> ScenarioFalse
          | x ->
            (match eliminateQuantifiersHelper demorgan stage_names s b l with
             | ScenarioTrue -> x
             | ScenarioFalse -> ScenarioFalse
             | x0 -> ScenarioAnd (x, x0)))
    else (match eliminateQuantifiersHelper demorgan stage_names s a l with
          | ScenarioTrue -> ScenarioTrue
          | ScenarioFalse -> eliminateQuantifiersHelper demorgan stage_names s b l
          | x ->
            (match eliminateQuantifiersHelper demorgan stage_names s b l with
             | ScenarioTrue -> ScenarioTrue
             | ScenarioFalse -> x
             | x0 -> ScenarioOr (x, x0)))
  | FOLAnd (a, b) ->
    if negb demorgan
    then (match eliminateQuantifiersHelper demorgan stage_names s a l with
          | ScenarioTrue -> eliminateQuantifiersHelper demorgan stage_names s b l
          | ScenarioFalse -> ScenarioFalse
          | x ->
            (match eliminateQuantifiersHelper demorgan stage_names s b l with
             | ScenarioTrue -> x
             | ScenarioFalse -> ScenarioFalse
             | x0 -> ScenarioAnd (x, x0)))
    else (match eliminateQuantifiersHelper demorgan stage_names s a l with
          | ScenarioTrue -> ScenarioTrue
          | ScenarioFalse -> eliminateQuantifiersHelper demorgan stage_names s b l
          | x ->
            (match eliminateQuantifiersHelper demorgan stage_names s b l with
             | ScenarioTrue -> ScenarioTrue
             | ScenarioFalse -> x
             | x0 -> ScenarioOr (x, x0)))
  | FOLForAll (t, f') ->
    let Pair (_, terms) = t s l in
    let case = fun x y ->
      if demorgan
      then (match x with
            | ScenarioTrue -> ScenarioTrue
            | ScenarioFalse ->
              let y' = eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) in
              ScenarioName ((stringOfFOLTerm y), y')
            | _ ->
              (match eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) with
               | ScenarioTrue -> ScenarioTrue
               | ScenarioFalse -> x
               | x0 -> ScenarioOr (x, (ScenarioName ((stringOfFOLTerm y), x0)))))
      else (match x with
            | ScenarioTrue ->
              let y' = eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) in
              ScenarioName ((stringOfFOLTerm y), y')
            | ScenarioFalse -> ScenarioFalse
            | _ ->
              (match eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) with
               | ScenarioTrue -> x
               | ScenarioFalse -> ScenarioFalse
               | x0 -> ScenarioAnd (x, (ScenarioName ((stringOfFOLTerm y), x0)))))
    in
    fold_left case terms (if demorgan then ScenarioFalse else ScenarioTrue)
  | FOLExists (t, f') ->
    let Pair (_, terms) = t s l in
    let case = fun x y ->
      if negb demorgan
      then (match x with
            | ScenarioTrue -> ScenarioTrue
            | ScenarioFalse ->
              let y' = eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) in
              ScenarioName ((stringOfFOLTerm y), y')
            | _ ->
              (match eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) with
               | ScenarioTrue -> ScenarioTrue
               | ScenarioFalse -> x
               | x0 -> ScenarioOr (x, (ScenarioName ((stringOfFOLTerm y), x0)))))
      else (match x with
            | ScenarioTrue ->
              let y' = eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) in
              ScenarioName ((stringOfFOLTerm y), y')
            | ScenarioFalse -> ScenarioFalse
            | _ ->
              (match eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l y) with
               | ScenarioTrue -> x
               | ScenarioFalse -> ScenarioFalse
               | x0 -> ScenarioAnd (x, (ScenarioName ((stringOfFOLTerm y), x0)))))
    in
    fold_left case terms (if demorgan then ScenarioTrue else ScenarioFalse)
  | FOLLet (t, f') ->
    let t' = eliminateQuantifiersHelper demorgan stage_names s f' (addTerm l t) in
    ScenarioName ((stringOfFOLTerm t), t')

(** val setIntersectionIsEmpty : graphEdge list -> graphEdge list -> bool **)

let rec setIntersectionIsEmpty a b =
  match a with
  | [] -> true
  | h::t ->
    (match find (beq_edge0 h) b with
     | Some _ -> false
     | None -> setIntersectionIsEmpty t b)

(** val setIntersectionHelper : graphEdge list -> graphEdge list -> graphEdge list -> graphEdge list **)

let rec setIntersectionHelper a b r =
  match a with
  | [] -> r
  | h::t ->
    (match find (beq_edge0 h) b with
     | Some _ -> setIntersectionHelper t b (h::r)
     | None -> setIntersectionHelper t b r)

(** val setIntersection : graphEdge list -> graphEdge list -> graphEdge list **)

let setIntersection a b =
  setIntersectionHelper a b []

(** val sDFindEdge : graphEdge -> graphEdge list -> graphEdge option **)

let rec sDFindEdge e = function
| [] -> Some e
| h::t ->
  if beq_edge0 h e
  then let Pair (p, _) = h in
       let Pair (_, hl) = p in
       let Pair (p0, _) = e in
       let Pair (_, el) = p0 in
       let p1 = Pair ((Pair
         ((beq_string ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
            ('T', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
            (String.make 0 ' '))))) hl),
         (string_prefix ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('N', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
           (String.make 0 ' '))))))))) hl))),
         (beq_string ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('T', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
           (String.make 0 ' '))))) el))
       in
       let b =
         string_prefix ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('N', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
           (String.make 0 ' '))))))))) el
       in
       let Pair (p2, b0) = p1 in
       let Pair (b1, b2) = p2 in
       if b1
       then if b2
            then warning None
                   (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('?',
                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
            else if b0
                 then if b
                      then warning None
                             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('C',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('N',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('O',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('_',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('m',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('y',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('?', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                      else None
                 else if b then None else Some e
       else if b2
            then if b0
                 then if b
                      then warning None
                             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('C',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('N',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('O',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('_',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('m',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('y',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('?', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                      else Some e
                 else if b then None else Some e
            else if b0
                 then if b
                      then warning None
                             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('C',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('N',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('O',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('_',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('m',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('y',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('?', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                      else None
                 else None
  else sDFindEdge e t

(** val setDifferenceHelper : graphEdge list -> graphEdge list -> graphEdge list -> graphEdge list **)

let rec setDifferenceHelper a b r =
  match a with
  | [] -> r
  | h::t ->
    (match sDFindEdge h b with
     | Some e -> setDifferenceHelper t b (e::r)
     | None -> setDifferenceHelper t b r)

(** val setDifference : graphEdge list -> graphEdge list -> graphEdge list **)

let setDifference a b =
  setDifferenceHelper a b []

(** val nodeSetIntersectionIsEmpty : graphNode list -> graphNode list -> bool **)

let rec nodeSetIntersectionIsEmpty a b =
  match a with
  | [] -> true
  | h::t ->
    (match find (beq_node h) b with
     | Some _ -> false
     | None -> nodeSetIntersectionIsEmpty t b)

(** val nodeSetIntersectionHelper : graphNode list -> graphNode list -> graphNode list -> graphNode list **)

let rec nodeSetIntersectionHelper a b r =
  match a with
  | [] -> r
  | h::t ->
    (match find (beq_node h) b with
     | Some _ -> nodeSetIntersectionHelper t b (h::r)
     | None -> nodeSetIntersectionHelper t b r)

(** val nodeSetIntersection : graphNode list -> graphNode list -> graphNode list **)

let rec nodeSetIntersection a b =
  nodeSetIntersectionHelper a b []

(** val nodeSetDifferenceHelper : graphNode list -> graphNode list -> graphNode list -> graphNode list **)

let rec nodeSetDifferenceHelper a b r =
  match a with
  | [] -> r
  | h::t ->
    (match find (beq_node h) b with
     | Some _ -> nodeSetDifferenceHelper t b r
     | None -> nodeSetDifferenceHelper t b (h::r))

(** val nodeSetDifference : graphNode list -> graphNode list -> graphNode list **)

let nodeSetDifference a b =
  nodeSetDifferenceHelper a b []

(** val scenarioTreeKeepIfFalse : fOLState -> scenarioTree -> scenarioTree option **)

let rec scenarioTreeKeepIfFalse s = function
| ScenarioName (n0, t') ->
  (match scenarioTreeKeepIfFalse s t' with
   | Some t'' -> Some (ScenarioName (n0, t''))
   | None -> None)
| ScenarioAnd (a, b) ->
  let o = scenarioTreeKeepIfFalse s a in
  let o0 = scenarioTreeKeepIfFalse s b in
  (match o with
   | Some a' ->
     (match o0 with
      | Some b' -> Some (ScenarioAnd (a', b'))
      | None -> Some a')
   | None -> o0)
| ScenarioOr (a, b) ->
  let o = scenarioTreeKeepIfFalse s a in
  let o0 = scenarioTreeKeepIfFalse s b in
  (match o with
   | Some a' ->
     (match o0 with
      | Some b' -> Some (ScenarioOr (a', b'))
      | None -> None)
   | None -> None)
| ScenarioEdgeLeaf l ->
  (match setIntersection (flipEdges l) s.stateEdges with
   | [] -> None
   | g::l0 -> Some (ScenarioEdgeLeaf (flipEdges (g::l0))))
| ScenarioNodeLeaf l ->
  (match nodeSetIntersection l s.stateNotNodes with
   | [] -> None
   | g::l0 -> Some (ScenarioNodeLeaf (g::l0)))
| ScenarioNotNodeLeaf l ->
  let l1 = nodeSetIntersection l s.stateNodes in
  let l2 = nodeSetIntersection l s.stateEdgeNodes in
  (match l1 with
   | [] ->
     (match l2 with
      | [] -> None
      | _::_ -> Some (ScenarioNotNodeLeaf l2))
   | _::_ ->
     (match l2 with
      | [] -> Some (ScenarioNotNodeLeaf l1)
      | _::_ -> Some (ScenarioNotNodeLeaf (app_rev l1 l2))))
| ScenarioTrue -> None
| ScenarioFalse -> Some ScenarioFalse

(** val eliminateQuantifiers : string list list -> fOLState -> fOLFormula -> fOLTerm list -> scenarioTree **)

let eliminateQuantifiers stage_names s f l =
  let t = eliminateQuantifiersHelper false stage_names s f l in
  let t' = simplifyScenarioTree t in
  let t'0 =
    scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) 0))))) t'
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('Q',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('A',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  if printFlag 0
  then if reducesToFalse t'0
       then let t'' =
              match scenarioTreeKeepIfFalse s t with
              | Some t''' ->
                scenarioTreeEdgeCountGraph 0 t'''
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('F',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                  (String.make 0 ' ')))))))))))))))))))))))))))))
              | None ->
                warning ScenarioFalse
                  (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('\'',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('?',
                  (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))::[])
            in
            (match t'' with
             | ScenarioTrue ->
               comment t'0
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('?',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
             | _ ->
               comment t'0
                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
       else t'0
  else t'0

(** val reevaluateScenarioTree : fOLState -> scenarioTree -> scenarioTree **)

let rec reevaluateScenarioTree s t = match t with
| ScenarioName (n0, t') -> ScenarioName (n0, (reevaluateScenarioTree s t'))
| ScenarioAnd (a, b) -> ScenarioAnd ((reevaluateScenarioTree s a), (reevaluateScenarioTree s b))
| ScenarioOr (a, b) -> ScenarioOr ((reevaluateScenarioTree s a), (reevaluateScenarioTree s b))
| ScenarioEdgeLeaf l ->
  if setIntersectionIsEmpty (flipEdges l) s.stateEdges
  then ScenarioEdgeLeaf (setDifference l s.stateEdges)
  else ScenarioFalse
| ScenarioNodeLeaf l ->
  if nodeSetIntersectionIsEmpty l s.stateNotNodes
  then ScenarioNodeLeaf (nodeSetDifference l s.stateNodes)
  else ScenarioFalse
| ScenarioNotNodeLeaf l ->
  if if nodeSetIntersectionIsEmpty l s.stateNodes then nodeSetIntersectionIsEmpty l s.stateEdgeNodes else false
  then (match nodeSetDifference l s.stateNotNodes with
        | [] -> ScenarioTrue
        | g::l0 -> ScenarioNotNodeLeaf (g::l0))
  else ScenarioFalse
| _ -> t

(** val scenarioTreeAssignLeaves : fOLState -> scenarioTree -> scenarioTree **)

let rec scenarioTreeAssignLeaves s = function
| ScenarioName (n0, t') -> ScenarioName (n0, (scenarioTreeAssignLeaves s t'))
| ScenarioAnd (a, b) -> ScenarioAnd ((scenarioTreeAssignLeaves s a), (scenarioTreeAssignLeaves s b))
| ScenarioOr (a, b) -> ScenarioOr ((scenarioTreeAssignLeaves s a), (scenarioTreeAssignLeaves s b))
| ScenarioEdgeLeaf l -> if setIntersectionIsEmpty (flipEdges l) s.stateEdges then ScenarioTrue else ScenarioFalse
| ScenarioNodeLeaf l -> if nodeSetIntersectionIsEmpty l s.stateNotNodes then ScenarioTrue else ScenarioFalse
| ScenarioNotNodeLeaf l ->
  if if nodeSetIntersectionIsEmpty l s.stateNodes then nodeSetIntersectionIsEmpty l s.stateEdgeNodes else false
  then ScenarioTrue
  else ScenarioFalse
| x -> x

type fOLMacro = ((string, string list) prod, fOLFormula) prod

(** val findMacro : string -> fOLMacro list -> (string list, fOLFormula) prod option **)

let rec findMacro name = function
| [] ->
  warning None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::(name::[]))
| f::t ->
  let Pair (p, h_formula) = f in
  let Pair (h_name, h_args) = p in
  if beq_string name h_name then Some (Pair (h_args, h_formula)) else findMacro name t

(** val argsZipHelper : 'a1 list -> 'a2 list -> ('a1, 'a2) prod list -> ('a1, 'a2) prod list **)

let rec argsZipHelper a b r =
  match a with
  | [] ->
    (match b with
     | [] -> r
     | _::_ ->
       warning r (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('M',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
  | h_a::t_a ->
    (match b with
     | [] ->
       warning r (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('M',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
     | h_b::t_b -> argsZipHelper t_a t_b ((Pair (h_a, h_b))::r))

(** val argsZip : 'a1 list -> 'a2 list -> ('a1, 'a2) prod list **)

let argsZip a b =
  argsZipHelper a b []

(** val fOLExpandMacros : int -> fOLMacro list -> fOLFormula -> fOLFormula **)

let rec fOLExpandMacros d l f =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    warning (FOLPredicate PredFalse)
      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('x',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
    (fun d' ->
    match f with
    | FOLName (s, f') -> FOLName (s, (fOLExpandMacros d' l f'))
    | FOLExpandMacro (s, given_args) ->
      (match findMacro s l with
       | Some p ->
         let Pair (old_args, m) = p in
         let f' =
           fold_left (fun x y -> FOLLet ((MacroArgTerm ((fst y), (snd y))), x)) (argsZip old_args given_args) m
         in
         FOLName (s, (fOLExpandMacros d' l f'))
       | None ->
         warning (FOLPredicate PredFalse)
           (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('M',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           (String.make 0 ' ')))))))))))))::(s::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           (' ', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
           (String.make 0 ' ')))))))))))))))))))))))::[]))))
    | FOLPredicate p -> FOLPredicate p
    | FOLNot f' -> FOLNot (fOLExpandMacros d' l f')
    | FOLOr (a, b) -> FOLOr ((fOLExpandMacros d' l a), (fOLExpandMacros d' l b))
    | FOLAnd (a, b) -> FOLAnd ((fOLExpandMacros d' l a), (fOLExpandMacros d' l b))
    | FOLForAll (q, f') -> FOLForAll (q, (fOLExpandMacros d' l f'))
    | FOLExists (q, f') -> FOLExists (q, (fOLExpandMacros d' l f'))
    | FOLLet (t, f') -> FOLLet (t, (fOLExpandMacros d' l f')))
    d

(** val checkFinalState : string list list -> architectureLevelEdge list -> bool -> fOLState -> bool **)

let checkFinalState stage_names arch_edges check_nodes s =
  match topsort s.stateEdges with
  | ReverseTotalOrder _ ->
    let nodes = nodesFromEdges s.stateEdges in
    if negb (nodeSetIntersectionIsEmpty s.stateNotNodes nodes)
    then let result = false in
         if printFlag ((fun x -> x + 1) 0)
         then comment result
                (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('w',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
         else result
    else if check_nodes
         then (match nodeSetDifference s.stateNodes (nodesFromEdges s.stateEdges) with
               | [] ->
                 let result = true in
                 if printFlag ((fun x -> x + 1) 0)
                 then comment result
                        (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('S',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('c',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('n',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('a',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('i',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('o',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('T',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('c',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('o',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('n',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('v',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('g',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('d', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))::[])
                 else result
               | _::_ ->
                 let result = false in
                 if printFlag ((fun x -> x + 1) 0)
                 then comment result
                        (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('S',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('c',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('n',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('a',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('i',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('o',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('T',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('c',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('o',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('n',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('v',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('g',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('d',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (',',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('b',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('u',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('t',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('q',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('u',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('i',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('d',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('n',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('o',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('d',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('s',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('w',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('m',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('i',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('s',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('s',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('i',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('n',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('g',
                        (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                 else result)
         else let result = true in
              if printFlag ((fun x -> x + 1) 0)
              then comment result
                     (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('S',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('c',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('e',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('n',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('a',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('r',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('i',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('o',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('T',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('r',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('e',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('e',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     (' ',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('c',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('o',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('n',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('v',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('e',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('r',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('g',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('e',
                     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                     ('d', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))::[])
              else result
  | _ ->
    let result = false in
    if printFlag ((fun x -> x + 1) 0)
    then comment result (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('S', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (',',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('y',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
           (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
           (graphvizCompressedGraph
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
             (String.make 0 ' '))))))))))))))) stage_names s.stateEdges [] arch_edges)))
    else result

(** val scenarioTreeCheckNodes : fOLState -> scenarioTree -> scenarioTree **)

let rec scenarioTreeCheckNodes s t = match t with
| ScenarioName (n0, t') ->
  (match scenarioTreeCheckNodes s t' with
   | ScenarioTrue -> ScenarioTrue
   | ScenarioFalse -> ScenarioFalse
   | x -> ScenarioName (n0, x))
| ScenarioAnd (a, b) -> ScenarioAnd ((scenarioTreeCheckNodes s a), (scenarioTreeCheckNodes s b))
| ScenarioOr (a, b) -> ScenarioOr ((scenarioTreeCheckNodes s a), (scenarioTreeCheckNodes s b))
| ScenarioEdgeLeaf l ->
  (match l with
   | [] -> ScenarioTrue
   | _::_ -> t)
| ScenarioNodeLeaf _ -> ScenarioTrue
| ScenarioNotNodeLeaf l ->
  (match l with
   | [] -> ScenarioFalse
   | _::_ -> ScenarioTrue)
| x -> x

(** val reevaluateScenarioTreeIterator :
    int -> string list list -> architectureLevelEdge list -> fOLState -> scenarioTree -> (fOLState, scenarioTree)
    prod **)

let rec reevaluateScenarioTreeIterator n0 stage_names arch_edges s t =
  let t'' = reevaluateScenarioTree s t in
  let t''0 =
    scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
      ((fun x -> x + 1) 0))))) t''
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  let t' = simplifyScenarioTree t''0 in
  let t'0 =
    scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))) t'
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('I',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
      (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  in
  if if reducesToTrue t'0 then checkFinalState stage_names arch_edges true s else false
  then let result = Pair (s, ScenarioTrue) in
       if printFlag ((fun x -> x + 1) 0)
       then comment result
              (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
       else result
  else if reducesToFalse t'0
       then let result = Pair (s, t'0) in
            if printFlag ((fun x -> x + 1) 0)
            then let t''1 =
                   match scenarioTreeKeepIfFalse s t with
                   | Some t''' ->
                     let t'''0 =
                       if printFlag ((fun x -> x + 1) 0)
                       then let t'''0 =
                              comment t'''
                                (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('R',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('a',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('c',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('h',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('d',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                (' ',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('d',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('a',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('d',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                (' ',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('n',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('d',
                                (String.make 0 ' ')))))))))))))))))))))))))))))))))::(newline::(graphvizCompressedGraph
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('D',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('e',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('a',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('d',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('E',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('n',
                                                                                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                                 ('d',
                                                                                                 (String.make 0 ' ')))))))))))))))
                                                                                                 stage_names
                                                                                                 s.stateEdges []
                                                                                                 arch_edges)))
                            in
                            (match findBranchingEdges t'''0 with
                             | Some cases ->
                               let f = fun a b ->
                                 let g' = app_rev s.stateEdges b in
                                 printf a
                                   (stringOf
                                     (graphvizCompressedGraph
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('D',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('e',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('a',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('d',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('E',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('n',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('d',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('B',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('r',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('a',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('n',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('c',
                                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                       ('h', (String.make 0 ' '))))))))))))))))))))))))))) stage_names g' []
                                       arch_edges))
                               in
                               fold_left f cases t'''0
                             | None ->
                               comment t'''0
                                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('N',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('b',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('h',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('g',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('g',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('s',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('?',
                                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
                       else t'''
                     in
                     scenarioTreeEdgeCountGraph ((fun x -> x + 1) 0) t'''0
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('R',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('d',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('u',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('c',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('T',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('F',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('l',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e', (String.make 0 ' ')))))))))))))))))))))))))))))
                   | None ->
                     warning ScenarioFalse
                       (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('D',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('n',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('\'',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       (' ',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('r',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('d',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('u',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('c',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       (' ',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       (' ',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('f',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('l',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('?', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))::[])
                 in
                 (match t''1 with
                  | ScenarioTrue ->
                    comment result
                      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('S',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('c',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('T',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('u',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('s',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('s',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('f',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('b',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('l',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('?', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                  | _ ->
                    comment result
                      (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('S',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('c',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('o',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('T',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('r',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      (' ',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('u',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('n',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('s',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('t',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('s',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('f',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('i',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('a',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('b',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('l',
                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                      ('e', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
            else result
       else let Pair (p, e1) = guaranteedEdges t'0 in
            let Pair (n1, n2) = p in
            (match n1 with
             | [] ->
               (match n2 with
                | [] ->
                  (match e1 with
                   | [] ->
                     if checkFinalState stage_names arch_edges false s
                     then let result = Pair (s, t'0) in
                          if printFlag ((fun x -> x + 1) 0)
                          then comment result
                                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('R',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('v',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('l',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('u',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('S',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('T',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('v',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('g',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('b',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('u',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('m',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('p',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('l',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                          else result
                     else let result = Pair (s, ScenarioFalse) in
                          if printFlag ((fun x -> x + 1) 0)
                          then comment result
                                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('R',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('v',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('l',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('u',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('S',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('T',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('v',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('g',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (',',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('b',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('u',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('g',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('p',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('h',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('s',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('v',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('l',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                          else result
                   | _::_ ->
                     (match transitiveClosure (app_rev s.stateEdges e1) with
                      | TC x ->
                        let e1' = edgesFromAdjacencyList x in
                        let n1' = app_rev s.stateNodes n1 in
                        let n2' = app_rev s.stateNotNodes n2 in
                        let s' = fOLStateReplaceEdges s n1' n2' e1' in
                        let s'0 =
                          if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                               ((fun x -> x + 1) ((fun x -> x + 1) 0))))))
                          then comment s'
                                 ((stringOfNat (length n1'))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('q',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('u',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))::[]))
                          else s'
                        in
                        let s'1 =
                          if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                               ((fun x -> x + 1) ((fun x -> x + 1) 0))))))
                          then comment s'0
                                 ((stringOfNat (length n2'))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('f',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('b',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))))::[]))
                          else s'0
                        in
                        ((fun fO fS n -> if n=0 then fO () else fS (n-1))
                           (fun _ ->
                           warning (Pair (s, ScenarioFalse))
                             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('R',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('v',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('S',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('c',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('r',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('r',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('I',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('r',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('n',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('m',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('i',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('x',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('c',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('!',
                             (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
                           (fun n' ->
                           let s'2 =
                             if printFlag ((fun x -> x + 1) ((fun x -> x + 1) 0))
                             then comment s'1
                                    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('R',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('v',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('a',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('l',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('u',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('a',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('t',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('S',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('c',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('n',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('a',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('r',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('i',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('o',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('T',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('r',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('I',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('t',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('r',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('a',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('t',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('o',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('r',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    (' ',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('i',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('t',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('e',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('r',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('a',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('t',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('i',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('n',
                                    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                    ('g',
                                    (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
                                    (graphvizCompressedGraph
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('I',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('t',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('e',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('r',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('a',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('t',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('i',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('n',
                                      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                      ('g', (String.make 0 ' '))))))))))))))))))) stage_names s'1.stateEdges
                                      (setDifference s'1.stateEdges s.stateEdges) arch_edges)))
                             else s'1
                           in
                           reevaluateScenarioTreeIterator n' stage_names arch_edges s'2 t'0)
                           n0)
                      | TCError e' ->
                        let result = Pair ((updateFOLState true s e'), ScenarioFalse) in
                        if printFlag ((fun x -> x + 1) 0)
                        then let f = fun a b -> comment a ((stringOfGraphEdge b)::[]) in
                             let result0 = fold_left f e' result in
                             comment result0
                               (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('G',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('a',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('p',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('h',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('s',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('w',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('y',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('l',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (';',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('p',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('u',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('g',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('.',
                               (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
                               (graphvizCompressedGraph
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('D',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('E',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('d', (String.make 0 ' '))))))))))))))) stage_names (fst result0).stateEdges []
                                 arch_edges)))
                        else result))
                | _::_ ->
                  (match transitiveClosure (app_rev s.stateEdges e1) with
                   | TC x ->
                     let e1' = edgesFromAdjacencyList x in
                     let n1' = app_rev s.stateNodes n1 in
                     let n2' = app_rev s.stateNotNodes n2 in
                     let s' = fOLStateReplaceEdges s n1' n2' e1' in
                     let s'0 =
                       if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                            ((fun x -> x + 1) ((fun x -> x + 1) 0))))))
                       then comment s'
                              ((stringOfNat (length n1'))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              (' ',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('q',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('u',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              (' ',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('o',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))::[]))
                       else s'
                     in
                     let s'1 =
                       if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                            ((fun x -> x + 1) ((fun x -> x + 1) 0))))))
                       then comment s'0
                              ((stringOfNat (length n2'))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              (' ',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('f',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('o',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('b',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              (' ',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('o',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))))::[]))
                       else s'0
                     in
                     ((fun fO fS n -> if n=0 then fO () else fS (n-1))
                        (fun _ ->
                        warning (Pair (s, ScenarioFalse))
                          (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('R',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('v',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('a',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('l',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('u',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('a',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('t',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('S',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('c',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('n',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('a',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('r',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('i',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('o',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('T',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('r',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('I',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('t',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('r',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('a',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('t',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('i',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('o',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('n',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('l',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('i',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('m',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('i',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('t',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('x',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('c',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('d',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('d',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('!',
                          (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
                        (fun n' ->
                        let s'2 =
                          if printFlag ((fun x -> x + 1) ((fun x -> x + 1) 0))
                          then comment s'1
                                 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('R',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('v',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('l',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('u',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('S',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('c',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('T',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('I',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('o',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 (' ',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('e',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('r',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('a',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('t',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('i',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('n',
                                 ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                 ('g',
                                 (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
                                 (graphvizCompressedGraph
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('I',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('t',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('e',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('r',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('a',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('t',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('i',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('n',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('g', (String.make 0 ' '))))))))))))))))))) stage_names s'1.stateEdges
                                   (setDifference s'1.stateEdges s.stateEdges) arch_edges)))
                          else s'1
                        in
                        reevaluateScenarioTreeIterator n' stage_names arch_edges s'2 t'0)
                        n0)
                   | TCError e' ->
                     let result = Pair ((updateFOLState true s e'), ScenarioFalse) in
                     if printFlag ((fun x -> x + 1) 0)
                     then let f = fun a b -> comment a ((stringOfGraphEdge b)::[]) in
                          let result0 = fold_left f e' result in
                          comment result0
                            (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('G',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('a',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('p',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('h',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('s',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('w',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('y',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('l',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (';',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('p',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('u',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('g',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('.',
                            (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
                            (graphvizCompressedGraph
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('D',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('E',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('d', (String.make 0 ' '))))))))))))))) stage_names (fst result0).stateEdges []
                              arch_edges)))
                     else result))
             | _::_ ->
               (match transitiveClosure (app_rev s.stateEdges e1) with
                | TC x ->
                  let e1' = edgesFromAdjacencyList x in
                  let n1' = app_rev s.stateNodes n1 in
                  let n2' = app_rev s.stateNotNodes n2 in
                  let s' = fOLStateReplaceEdges s n1' n2' e1' in
                  let s'0 =
                    if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                         ((fun x -> x + 1) ((fun x -> x + 1) 0))))))
                    then comment s'
                           ((stringOfNat (length n1'))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           (' ',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('r',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('q',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('u',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('i',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('r',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           (' ',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('n',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('o',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))::[]))
                    else s'
                  in
                  let s'1 =
                    if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                         ((fun x -> x + 1) ((fun x -> x + 1) 0))))))
                    then comment s'0
                           ((stringOfNat (length n2'))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           (' ',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('f',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('o',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('r',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('b',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('i',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('n',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           (' ',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('n',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('o',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))))::[]))
                    else s'0
                  in
                  ((fun fO fS n -> if n=0 then fO () else fS (n-1))
                     (fun _ ->
                     warning (Pair (s, ScenarioFalse))
                       (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('R',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('v',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('l',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('u',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('S',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('c',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('n',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('r',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('T',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('r',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       (' ',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('I',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('r',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('n',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       (' ',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('l',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('m',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       (' ',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('x',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('c',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('d',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('d',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('!',
                       (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[]))
                     (fun n' ->
                     let s'2 =
                       if printFlag ((fun x -> x + 1) ((fun x -> x + 1) 0))
                       then comment s'1
                              (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('R',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('v',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('l',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('u',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('S',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('c',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('o',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('T',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('I',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('o',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              (' ',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('g',
                              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
                              (graphvizCompressedGraph
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('I',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('t',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('e',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('r',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('a',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('t',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('i',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('n',
                                ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                ('g', (String.make 0 ' '))))))))))))))))))) stage_names s'1.stateEdges
                                (setDifference s'1.stateEdges s.stateEdges) arch_edges)))
                       else s'1
                     in
                     reevaluateScenarioTreeIterator n' stage_names arch_edges s'2 t'0)
                     n0)
                | TCError e' ->
                  let result = Pair ((updateFOLState true s e'), ScenarioFalse) in
                  if printFlag ((fun x -> x + 1) 0)
                  then let f = fun a b -> comment a ((stringOfGraphEdge b)::[]) in
                       let result0 = fold_left f e' result in
                       comment result0
                         (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('G',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('r',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('a',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('p',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('h',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('s',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('w',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('c',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('y',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('c',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('l',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('c',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (';',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         (' ',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('p',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('r',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('u',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('g',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('.',
                         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(newline::
                         (graphvizCompressedGraph
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('D',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('e',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('a',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('E',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('n',
                           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                           ('d', (String.make 0 ' '))))))))))))))) stage_names (fst result0).stateEdges []
                           arch_edges)))
                  else result))

(** val stringOfCase : graphEdge list -> string **)

let stringOfCase l =
  fold_left (fun a b ->
    stringOf
      (a::(newline::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      (String.make 0 ' ')))))))::((stringOfGraphEdge b)::[]))))) l
    (stringOf (newline::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
      ('/', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('/',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
      ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
      (String.make 0 ' ')))))))))))))))))::[])))

(** val stringOfDPLLState : (int, int) prod -> string **)

let rec stringOfDPLLState = function
| Pair (h1, h2) ->
  stringOf (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
    ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('(',
    (String.make 0 ' ')))))::((stringOfNat h1)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    ('/',
    (String.make 0 ' ')))::((stringOfNat h2)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
    (')', (String.make 0 ' ')))::[])))))

(** val negateScenarioTree : scenarioTree -> scenarioTree **)

let rec negateScenarioTree = function
| ScenarioName (s, t') -> ScenarioName (s, (negateScenarioTree t'))
| ScenarioAnd (a, b) -> ScenarioOr ((negateScenarioTree a), (negateScenarioTree b))
| ScenarioOr (a, b) -> ScenarioAnd ((negateScenarioTree a), (negateScenarioTree b))
| ScenarioEdgeLeaf l -> fold_left foldFlipEdge l ScenarioFalse
| ScenarioNodeLeaf l -> ScenarioNotNodeLeaf l
| ScenarioNotNodeLeaf l -> ScenarioNodeLeaf l
| ScenarioTrue -> ScenarioFalse
| ScenarioFalse -> ScenarioTrue

(** val fOL_DPLL :
    int -> architectureLevelEdge list -> (int, int) prod list -> string list list -> fOLState -> scenarioTree ->
    fOLState option **)

let rec fOL_DPLL n0 arch_edges path stage_names s t =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    let t0 =
      scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))) t
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
        (String.make 0 ' ')))))))))))))))))))))))))))))
    in
    let t1 =
      scenarioTreeEdgeCountGraph ((fun x -> x + 1) 0) (simplifyScenarioTree (scenarioTreeCheckNodes s t0))
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('B',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
        (String.make 0 ' ')))))))))))))))))))))))))))))
    in
    (match t1 with
     | ScenarioTrue ->
       warning (Some s) (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('F', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('T',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('R',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('U',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
     | _ ->
       warning (Some s) (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
         ('F', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('_',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('m',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
         (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])))
    (fun n' ->
    let s0 =
      if if printFlag ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
              0)))))
         then true
         else timeForStatusUpdate ((fun x -> x + 1) 0)
      then commentFlush s
             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             (String.make 0 ' ')))))))))))))))))))))::(map stringOfDPLLState (rev_append path [])))
      else s
    in
    let Pair (s', t') =
      reevaluateScenarioTreeIterator ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
        0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
        stage_names arch_edges s0 t
    in
    let t'0 =
      scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))) t'
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('S',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('C',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
        (String.make 0 ' ')))))))))))))))))))))))))))))
    in
    let t'1 =
      if printFlag ((fun x -> x + 1) 0)
      then comment t'0 (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
             ('G', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('p',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (':',
             (String.make 0 ' ')))))))))))))))))))::(newline::(graphvizCompressedGraph
                                                                (stringOf
                                                                  (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('C',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('o',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('n',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('v',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('e',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('r',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('g',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('e',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  ('d',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  (':',
                                                                  ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                  (' ',
                                                                  (String.make 0 ' ')))))))))))))))))))))))::
                                                                  (map stringOfDPLLState (rev_append path []))))
                                                                stage_names s'.stateEdges [] arch_edges)))
      else t'0
    in
    let t'' = scenarioTreeCheckNodes s' t'1 in
    let t''0 =
      scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0)))
        (simplifyScenarioTree t'')
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('B',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
        (String.make 0 ' ')))))))))))))))))))))))))))))
    in
    if reducesToTrue t''0
    then Some s'
    else if reducesToFalse t''0
         then if printFlag ((fun x -> x + 1) 0)
              then let t0 =
                     scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1)
                       ((fun x -> x + 1) ((fun x -> x + 1) 0))))) (scenarioTreeAssignLeaves s' t'1)
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('P',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('r',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('U',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('n',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('f',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('b',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('l',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('e',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('C',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('o',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('n',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('r',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('a',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('i',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('n',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('t',
                       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                       ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))
                   in
                   let t''' =
                     match scenarioTreeKeepIfFalse s0 t0 with
                     | Some t''' ->
                       scenarioTreeEdgeCountGraph ((fun x -> x + 1) ((fun x -> x + 1) ((fun x -> x + 1) 0))) t'''
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('U',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('s',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('a',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('t',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('s',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('f',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('a',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('b',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('l',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('e',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('C',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('o',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('s',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('t',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('r',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('a',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('i',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('n',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('t',
                         ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                         ('s', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))
                     | None ->
                       (match topsort s'.stateEdges with
                        | ReverseTotalOrder _ ->
                          warning
                            (scenarioTreeEdgeCountGraph ((fun x -> x + 1) 0) t'1
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('U',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('s',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('s',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('f',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('b',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('l',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('e',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('C',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('o',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('s',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('r',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('a',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('i',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('n',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('t',
                              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                              ('s', (String.make 0 ' '))))))))))))))))))))))))))))))))))))))))))))))))))
                            (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('D',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('s',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('a',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('g',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('m',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('t',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('n',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('w',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('h',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('t',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('h',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('t',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('r',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('d',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('u',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('s',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('t',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('o',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            (' ',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('f',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('a',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('l',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('s',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('e',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('?',
                            (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
                        | _ ->
                          ScenarioName
                            (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('C',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('y',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('l',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('i',
                            ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                            ('c', (String.make 0 ' '))))))))))))), ScenarioFalse))
                   in
                   (match t''' with
                    | ScenarioTrue ->
                      warning None
                        (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('T',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('r',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('d',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('u',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('c',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('d',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('t',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('o',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        (' ',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('f',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('a',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('l',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('s',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('e',
                        ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                        ('?', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))::[])
                    | _ ->
                      if printFlag ((fun x -> x + 1) ((fun x -> x + 1) 0))
                      then comment None
                             (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('T',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('r',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('r',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('u',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('c',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('d',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('t',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('o',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             (' ',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('f',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('a',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('l',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('s',
                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                             ('e', (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))::[])
                      else None)
              else None
         else (match findBranchingEdges t''0 with
               | Some cases ->
                 let cases0 =
                   if printFlag ((fun x -> x + 1) 0)
                   then comment cases
                          (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('D',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('P',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('L',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('L',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('F',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('o',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('u',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('n',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('d',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          (String.make 0 ' ')))))))))))))))))))))))::((stringOfNat (length cases))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('t',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('o',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          (' ',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('c',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('o',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('n',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('s',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('i',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('d',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('e',
                          ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                          ('r',
                          (String.make 0 ' ')))))))))))))))))))))))))::((stringOf (map stringOfCase cases))::[]))))
                   else cases
                 in
                 let f_fold = fun a b ->
                   let Pair (p, a3) = a in
                   let Pair (a1, a2) = p in
                   (match a1 with
                    | Some _ -> Pair ((Pair (a1, ScenarioFalse)), ((fun x -> x + 1) a3))
                    | None ->
                      let s'' = updateFOLState false s' b in
                      let new_path = (Pair (a3, (length cases0)))::path in
                      let s''0 =
                        if printFlag ((fun x -> x + 1) 0)
                        then comment s''
                               (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('D',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('P',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('L',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('L',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('s',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('g',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('a',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('s',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('w',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('h',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('c',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('h',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('t',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('h',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('f',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('l',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('l',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('o',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('w',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('i',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('n',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('g',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('g',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('s',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('w',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('r',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (' ',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('a',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('e',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               ('d',
                               ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                               (':',
                               (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::((stringOfCase
                                                                                                           b)::(newline::
                               (graphvizCompressedGraph
                                 (stringOf
                                   (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('C',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('o',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('n',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('s',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('i',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('d',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('e',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('r',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('i',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('n',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('g',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (' ',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('C',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('a',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('s',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('e',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (' ',
                                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))::((stringOf
                                                                                             (map stringOfDPLLState
                                                                                               (rev_append new_path
                                                                                                 [])))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (' ',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('(',
                                   (String.make 0 ' ')))))::((stringOfNat (length b))::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (' ',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('e',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('d',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('g',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('e',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('(',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('s',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (')',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (',',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (' ',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('d',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('e',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('p',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('t',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('h',
                                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   ('=',
                                   (String.make 0 ' ')))))))))))))))))))))))))))))))))::((stringOfNat n0)::(( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                   (')', (String.make 0 ' ')))::[])))))))) stage_names s''.stateEdges b arch_edges)))))
                        else s''
                      in
                      let new_tree = ScenarioAnd (a2, t'1) in
                      let new_conflict = ScenarioAnd (a2, (negateScenarioTree (ScenarioEdgeLeaf b))) in
                      Pair ((Pair ((fOL_DPLL n' arch_edges new_path stage_names s''0 new_tree), new_conflict)),
                      ((fun x -> x + 1) a3)))
                 in
                 fst (fst (fold_left f_fold cases0 (Pair ((Pair (None, ScenarioTrue)), 0))))
               | None ->
                 warning None
                   (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('D',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('P',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('L',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('f',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('h',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('i',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('g',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
                   ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('!',
                   (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])))
    n0

type fOLStatement =
| FOLAxiom of fOLFormula
| FOLMacroDefinition of fOLMacro
| FOLContextTerm of fOLTerm

(** val addContext : int -> fOLTerm list -> fOLFormula -> fOLFormula **)

let rec addContext core c f =
  match c with
  | [] -> f
  | h::t -> FOLLet (h, (addContext core t f))

(** val evaluateFOLStatementsHelper :
    int -> fOLMacro list -> fOLTerm list -> fOLFormula -> fOLStatement list -> fOLFormula **)

let rec evaluateFOLStatementsHelper core m c f = function
| [] -> fOLExpandMacros macroExpansionDepth m (addContext core c f)
| f0::t ->
  (match f0 with
   | FOLAxiom f' -> evaluateFOLStatementsHelper core m c (FOLAnd (f, f')) t
   | FOLMacroDefinition m' -> evaluateFOLStatementsHelper core (m'::m) c f t
   | FOLContextTerm c' -> evaluateFOLStatementsHelper core m (addTerm c c') f t)

(** val evaluateFOLStatements : int -> fOLStatement list -> fOLFormula **)

let evaluateFOLStatements c l =
  evaluateFOLStatementsHelper c [] ((IntTerm
    (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('c',
    (String.make 0 ' '))), c))::[]) (FOLPredicate PredTrue) l

type microarchitecturalComponent = fOLStatement list

type microarchitecture = microarchitecturalComponent list

(** val buildMicroarchitectureHelper : microarchitecturalComponent list -> int -> fOLFormula **)

let rec buildMicroarchitectureHelper l c =
  match l with
  | [] -> FOLPredicate PredFalse
  | h::t ->
    (match t with
     | [] -> let result = evaluateFOLStatements c h in printGraphvizStringOfFOLFormula result
     | _::_ ->
       let result = evaluateFOLStatements c h in
       let result0 = printGraphvizStringOfFOLFormula result in
       FOLAnd (result0, (buildMicroarchitectureHelper t ((fun x -> x + 1) c))))

(** val buildMicroarchitecture : microarchitecture -> fOLFormula **)

let rec buildMicroarchitecture m =
  buildMicroarchitectureHelper m 0

(** val setNth : int -> 'a1 option list -> 'a1 -> 'a1 option list **)

let rec setNth n0 l a =
  (fun fO fS n -> if n=0 then fO () else fS (n-1))
    (fun _ ->
    match l with
    | [] -> (Some a)::[]
    | _::t -> (Some a)::t)
    (fun n' ->
    match l with
    | [] -> None::(setNth n' [] a)
    | h::t -> h::(setNth n' t a))
    n0

(** val stageNamesRemoveOptions : string option list -> string list **)

let rec stageNamesRemoveOptions = function
| [] -> []
| o::t ->
  (match o with
   | Some h -> h::(stageNamesRemoveOptions t)
   | None ->
     ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('U',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('k',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('w',
       ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
       (String.make 0 ' ')))))))))))))))::(stageNamesRemoveOptions t))

(** val stageNamesHelper : microarchitecturalComponent -> string option list -> string list **)

let rec stageNamesHelper m l =
  match m with
  | [] -> stageNamesRemoveOptions l
  | f::t ->
    (match f with
     | FOLContextTerm f0 ->
       (match f0 with
        | StageNameTerm (s, n0) -> stageNamesHelper t (setNth n0 l s)
        | _ -> stageNamesHelper t l)
     | _ -> stageNamesHelper t l)

(** val stageNames : microarchitecture -> string list list **)

let rec stageNames = function
| [] -> []
| h::t -> (stageNamesHelper h [])::(stageNames t)

(** val evaluateUHBGraphs :
    int -> microarchitecture -> ((microop list, architectureLevelEdge list) prod, boundaryCondition list) prod list
    -> boundaryCondition list -> (graphEdge list, architectureLevelEdge list) prod option **)

let rec evaluateUHBGraphs max_depth m programs initial =
  match programs with
  | [] ->
    if printFlag 0
    then comment None (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
           ('E', ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('N',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('n',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('-',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
           ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
           (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))))))))))::[])
    else None
  | p::t ->
    let Pair (p0, h_final) = p in
    let Pair (h_ops, h_edges) = p0 in
    let s = { stateNodes = []; stateNotNodes = []; stateEdgeNodes = []; stateEdges = []; stateUops = h_ops;
      stateInitial = initial; stateFinal = h_final; stateArchEdges = h_edges }
    in
    let t' = eliminateQuantifiers (stageNames m) s (buildMicroarchitecture m) [] in
    (match fOL_DPLL max_depth h_edges [] (stageNames m) s t' with
     | Some s0 ->
       let result = Some (Pair (s0.stateEdges, h_edges)) in
       if printFlag 0
       then comment result
              (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('O',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))::(newline::(graphvizCompressedGraph
                                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                             ('F',
                                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                             ('i',
                                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                             ('n',
                                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                             ('a',
                                                                                             ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) ) 
                                                                                             ('l',
                                                                                             (String.make 0 ' ')))))))))))
                                                                                             (stageNames m)
                                                                                             s0.stateEdges []
                                                                                             h_edges)))
       else comment result
              (( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('E',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('u',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('d',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('t',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  (' ',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('o',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('s',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('r',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('v',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('a',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('b',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('l',
              ( ( fun (a: (char * string)) -> (String.make 1 (Pervasives.fst a)) ^ (Pervasives.snd a) )  ('e',
              (String.make 0 ' ')))))))))))))))))))))))))))))))))))))))))))))))::[])
     | None -> evaluateUHBGraphs max_depth m t initial)

type expectedResult =
| Permitted
| Forbidden
| Required
| Unobserved
