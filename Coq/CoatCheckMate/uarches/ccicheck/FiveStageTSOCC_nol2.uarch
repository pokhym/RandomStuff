% Legend:
% "/\" = AND
% "\/" = OR
% "~"  = NOT
% "=>" = IMPLIES
% "%"  = COMMENT
%
% Graph node = (instruction, (pipeline, stage number))
% Graph edge = (node, node, label)
%
% "c" is predefined to be the core ID

StageName 0 "Fetch".
StageName 1 "Decode".
StageName 2 "Execute".
StageName 3 "MemoryStage".
StageName 4 "Writeback".
StageName 5 "StoreBuffer".
StageName 6 "L1ViCLCreate".
StageName 8 "L1ViCLExpire".
StageName 9 "MemoryHierarchy".

DefineMacro "STBFwd":
  exists microop "w", (
    IsAnyWrite w
    /\
    SameVirtualAddress w i
    /\
    SameCore w i
    /\
    SameData w i
    /\
    AddEdges [((w, MemoryStage), (i, MemoryStage ), "STBFwd", "red");
              ((i, MemoryStage), (w, L1ViCLCreate), "STBFwd", "purple")]
    /\
    ~exists microop "w'", (
      IsAnyWrite w'
      /\
      SameVirtualAddress w w'
      /\
      SameCore w w'
      /\
      ProgramOrder w w'
      /\ 
      ProgramOrder w' i
    )
  ).

% because the stb is empty
% read from l1 cache
DefineMacro "STBEmpty":
  forall microop "w", (
    IsAnyWrite w
    =>
    SameCore w i
    =>
    SameVirtualAddress w i
    =>
    ProgramOrder w i
    =>
    AddEdge ((w, L1ViCLCreate), (i, MemoryStage), "STBEmpty", "purple")
  ).

DefineMacro "FindL1ViCL":
  exists microop "s", (
    SamePhysicalAddress s i
    /\
    SameData s i
    /\
    SameCore s i   % since L1 caches are private
    /\
    AddEdges [
      ((s, L1ViCLCreate), (i, MemoryStage ), "rf", "red");
      ((i, MemoryStage ), (s, L1ViCLExpire), "rf", "brown")
    ]
    /\
    (
      AccessType RMW i
      =>
      (
        % if it's an RMW, the ViCL cache line must be in exclusive state:
        % 1) either it was a write or it was this instruction itself
        % 2) the read must happen while the line is still in exclusive state
        % We model the ViCL as downgrading even though this wouldn't likely
        % happen in reality.  This is just a bookkeeping way to say that the
        % cache line is still in the exclusive state at the time of the read
        (SameMicroop s i \/ IsAnyWrite s)
        /\
        AddEdge ((i, MemoryStage), (s, MemoryHierarchy), "rf", "brown")
      )
    )
  ).

% NEW: From FiveStage.uarch
% TODO: Probably need to change MemoryStage to L1
DefineMacro "BeforeAllWrites":
  % Read occurs before all writes to same PA & Data
  DataFromInitialStateAtPA i /\
  forall microop "w", (
    IsAnyWrite w => SamePhysicalAddress w i => ~SameMicroop i w =>
    AddEdge ((i, MemoryStage), (w, (0, MemoryHierarchy)), "fr", "red")).

% NEW: Frome FiveStage.uarch
% TODO: Probably need to change MemoryStage to L1
DefineMacro "ReadFromLatestValue":
exists microop "w", (
  IsAnyWrite w /\ SamePhysicalAddress w i /\ SameData w i /\
  AddEdge ((w, (0, MemoryHierarchy)), (i,     MemoryStage ), "rf", "red") /\
  ~(exists microop "w'",
    IsWrite w' /\
    SamePhysicalAddress i w' /\
    EdgesExist [((w , (0, MemoryHierarchy)), (w', (0, MemoryHierarchy)), "");
                ((w', (0, MemoryHierarchy)), (i ,     MemoryStage     ), "")])).

% NEW: Add parts of FiveStage.uarch
Axiom "Reads":
  forall microops "i",
    OnCore c i =>
    IsAnyRead i =>
    AddEdges [((i, Fetch),       (i, Decode),      "path");
              ((i, Decode),      (i, Execute),     "path");
              ((i, Execute),     (i, MemoryStage), "path");
              ((i, MemoryStage), (i, Writeback),   "path")]
    /\
    (
      % If the data is set to "unknown/don't care", then don't try
      % to find a source write for it
      KnownData i
      =>
      (
        ExpandMacro STBFwd
        \/
        (
          ExpandMacro STBEmpty /\ ExpandMacro FindL1ViCL /\
          (ExpandMacro BeforeAllWrites \/ ExpandMacro ReadFromLatestValue)
        )
      )
    ).

% Does this need to have an edge from L1ViCLExpire to MemoryHierarchy?
% NEW: Added anyways
Axiom "Writes":
  forall microops "i",
    OnCore c i =>
    IsAnyWrite i =>
    AddEdges [
      ((i, Fetch          ), (i, Decode         ), "path");
      ((i, Decode         ), (i, Execute        ), "path");
      ((i, Execute        ), (i, MemoryStage    ), "path");
      ((i, MemoryStage    ), (i, Writeback      ), "path");
      ((i, Writeback      ), (i, StoreBuffer    ), "path");
      ((i, StoreBuffer    ), (i, L1ViCLCreate   ), "path");
      ((i, L1ViCLCreate   ), (i, L1ViCLExpire),    "path");
      ((i, L1ViCLExpire   ), (i, MemoryHierarchy), "path")
    ].

Axiom "WriteIsBeforeFinal":
  % Since litmus tests sometimes specify that a particular memory location
  % should end up with a certain value, the store that writes that value
  % should be the last store to that location
  forall microop "w",
    OnCore c w
    =>
    (
      forall microop "w'",
        IsAnyWrite w
        =>
        IsAnyWrite w'
        =>
        SamePhysicalAddress w w'
        =>
        (~SameMicroop w w')
        =>
        DataFromFinalStateAtPA w'
        =>
        AddEdge ((w, L1ViCLExpire), (w', L1ViCLCreate), "ws_final", "red")
      ).

Axiom "mfence":
  forall microops "i",
    OnCore c i
    =>
    IsAnyFence i
    =>
    AddEdges [
      ((i, Fetch      ), (i, Decode     ), "path");
      ((i, Decode     ), (i, Execute    ), "path");
      ((i, Execute    ), (i, MemoryStage), "path");
      ((i, MemoryStage), (i, Writeback  ), "path")
    ]
    /\
    (
      % Flush all previous writes out of the store buffer
      forall microops "w",
      (
        IsAnyWrite w
        =>
        SameCore w i
        =>
        ProgramOrder w i
        =>
        AddEdge ((w, L1ViCLCreate), (i, Execute), "mfence", "orange")
      )
    )
    /\
    ExpandMacro TSOCCFence.

% NEW: Instead of downgrading to the L2 we just push it to the memory hierarchy
DefineMacro "TSOCCFence":
  % for any other L1 ViCLs on the same core, there are 3 options:
  % 1) The ViCL is in exclusive state when the fence executes, in which case
  %    nothing is done
  % 2) The ViCL is in shared state when the fence executes, in which case it
  %    is evicted
  % 3) The ViCL is created after the fence has already executed
  forall microops "i'",
    SameCore i' i
    =>
    (~SameMicroop i i')
    =>
    (
      (
        IsAnyWrite i'
        /\
        AddEdges [
          ((i', L1ViCLCreate), (i , Execute        ), "mfence", "orange");
          ((i , Execute     ), (i', MemoryHierarchy), "mfence", "orange")
        ]
      )
      \/
      AddEdge ((i', L1ViCLExpire), (i, Execute), "mfence", "orange")
      \/
      AddEdge ((i, Execute), (i', L1ViCLCreate), "mfence", "orange")
    ).

% BEGIN AXIOMS

% NEW: WriteSerialization
Axiom "WriteSerialization":
SameCore 0 c =>
forall microops "i1", forall microops "i2",
(~SameMicroop i1 i2) => IsAnyWrite i1 => IsAnyWrite i2 => SamePhysicalAddress i1 i2 => (
(AddEdge ((i1, (0, MemoryHierarchy)), (i2, (0, MemoryHierarchy)), "ws", "red")) \/
(AddEdge ((i2, (0, MemoryHierarchy)), (i1, (0, MemoryHierarchy)), "ws", "red"))).

Axiom "RMW":
  forall microop "w",
    IsAnyWrite w
    =>
    AccessType RMW w
    =>
    (
      % Find the read half of this RMW
      exists microop "r",
        ConsecutiveMicroops r w
        /\
        IsAnyRead r
        /\
        AccessType RMW r
        /\
        ExpandMacro IsRMWFence
        /\
        (
          % the write ViCL exists after the read ViCL
          forall microops "i'",
            ProgramOrder w i'
            =>
            IsAnyRead i'
            =>
            AddEdge ((w, L1ViCLCreate), (i', MemoryStage), "rmw", "orange")
        )
        /\
        (
          % there is no other L1 ViCL in between these (globally)
          ~exists microop "i'",
            IsAnyWrite i'
            /\
            SamePhysicalAddress w i'
            /\
            EdgesExist [
              ((r , MemoryStage ), (i', L1ViCLCreate), "");
              ((i', L1ViCLCreate), (w , L1ViCLCreate), "")
            ]
        )
    ).

% NEW: Change l1 downgrade to memory hierarchy
DefineMacro "IsRMWFence":
  % Like macro "TSOCCFence", but as the read passes through the memory stage
  forall microops "i'",
    SameCore i' w
    =>
    (~SameMicroop w i')
    =>
    (~SameMicroop r i')
    =>
    (
      (
        IsAnyWrite i'
        /\
        AddEdges [
          ((i', L1ViCLCreate), (r, MemoryStage), "mfence", "orange");
          ((w, L1ViCLCreate), (i', MemoryHierarchy), "mfence", "orange")
        ]
      )
      \/
      AddEdge ((i', L1ViCLExpire), (r, MemoryStage), "mfence", "orange")
      \/
      AddEdge ((w, L1ViCLCreate), (i', L1ViCLCreate), "mfence", "orange")
    ).

Axiom "PO/Fetch":
forall microops "i1",
forall microops "i2",
(OnCore c i1 /\ OnCore c i2 /\ ProgramOrder i1 i2) =>
AddEdge ((i1, Fetch), (i2, Fetch), "PO", "blue").

Axiom "Decode_stage_is_in-order":
forall microops "i1",
forall microops "i2",
OnCore c i1 => OnCore c i2 =>
EdgeExists ((i1, Fetch), (i2, Fetch), "") =>
NodesExist [(i1, Decode); (i2, Decode)] =>
AddEdge ((i1, Decode), (i2, Decode), "PPO", "darkgreen").

Axiom "Execute_stage_is_in-order":
forall microops "i1",
forall microops "i2",
OnCore c i1 => OnCore c i2 =>
EdgeExists ((i1, Decode), (i2, Decode), "") =>
NodesExist [(i1, Execute); (i2, Execute)] =>
AddEdge ((i1, Execute), (i2, Execute), "PPO", "darkgreen").

Axiom "Memory_stage_is_in-order":
forall microops "i1",
forall microops "i2",
OnCore c i1 => OnCore c i2 =>
EdgeExists ((i1, Execute), (i2, Execute), "") =>
NodesExist [(i1, MemoryStage); (i2, MemoryStage)] =>
AddEdge ((i1, MemoryStage), (i2, MemoryStage), "PPO", "darkgreen").

Axiom "Writeback_stage_is_in-order":
forall microops "i1",
forall microops "i2",
OnCore c i1 => OnCore c i2 =>
EdgeExists ((i1, MemoryStage), (i2, MemoryStage), "") =>
NodesExist [(i1, Writeback);  (i2, Writeback)] =>
AddEdge ((i1, Writeback), (i2, Writeback), "PPO", "darkgreen").

Axiom "STB_FIFO":
forall microops "i1",
forall microops "i2",
OnCore c i1 => OnCore c i2 =>
IsAnyWrite i1 => IsAnyWrite i2 =>
EdgeExists ((i1, Writeback), (i2, Writeback), "") =>
NodesExist [(i1, StoreBuffer); (i2, StoreBuffer)] =>
AddEdge ((i1, StoreBuffer), (i2, StoreBuffer), "PPO", "darkgreen").

Axiom "STB_OneAtATime":
forall microops "i1",
forall microops "i2",
OnCore c i1 => OnCore c i2 =>
IsAnyWrite i1 => IsAnyWrite i2 =>
EdgeExists ((i1, StoreBuffer), (i2, StoreBuffer), "") =>
NodesExist [(i1, L1ViCLCreate); (i2, StoreBuffer)] =>
AddEdge ((i1, L1ViCLCreate), (i2, StoreBuffer), "PPO", "darkgreen").

% NEW: Remove the Downgrade condition
DefineMacro "L1ViCLExists" a:
  NodeExists (a, L1ViCLCreate)
  \/
  NodeExists (a, L1ViCLExpire).

% NEW: Deleted L2ViCLExists

% DVI : Data value invariant
%   The value of an address at the start of a newread epoch 
%   is the same as its value at the end of thelast read-write epoch
% NEW: Change all the L2 to Memory ierarchy
DefineMacro "L1ViCLDVISourceFromL1":
  % if i reads from i', then there can't be an i'' in between them
  (
    ~exists microop "i''", (
      IsAnyWrite i''
      /\
      SamePhysicalAddress i i''
      /\
      EdgesExist [
        ((i', L1ViCLCreate), (i'', L1ViCLCreate), "DVI");
        ((i'', L1ViCLCreate), (i, L1ViCLCreate), "DVI")
      ]
    )
  )
  /\
  (
    ~exists microop "i''",
    SamePhysicalAddress i i''
    /\
    EdgesExist [
      ((i', L1ViCLCreate), (i'', (0, MemoryHierarchy)), "DVI");
      ((i'', (0, MemoryHierarchy)), (i, L1ViCLCreate), "DVI")
    ]
  ).

% NEW: Rename L1ViCLDVISourceFromL2 to MemoryHierarchy
DefineMacro "L1ViCLDVISourceFromMemoryHierarchy":
  % if i reads from i', then there can't be an i'' in between them
  (
    ~exists microop "i''", (
      IsAnyWrite i''
      /\
      SamePhysicalAddress i i''
      /\
      EdgesExist [
        ((i', (0, MemoryHierarchy)), (i'', L1ViCLCreate), "DVI");
        ((i'', L1ViCLCreate), (i, L1ViCLCreate), "DVI")
      ]
    )
  )
  /\
  (
    ~exists microop "i''",
    SamePhysicalAddress i i''
    /\
    EdgesExist [
      ((i', (0, MemoryHierarchy)), (i'', (0, MemoryHierarchy)), "DVI");
      ((i'', (0, MemoryHierarchy)), (i, L1ViCLCreate), "DVI")
    ]
  ).

% NEW: Delete L1ViCLDowngrade and move to MemoryHierarchy
DefineMacro "L1ViCLFlushOnFill":
  forall microops "i''",
    (NodeExists (i'', L1ViCLCreate) \/ NodeExists (i'', L1ViCLExpire)) =>
    (~SameMicroop i i'') =>
    SameCore i i'' =>
    (
      AddEdge ((i'', L1ViCLExpire), (i, L1ViCLCreate), "miss", "orange")
      \/
      (
        IsAnyWrite i''
        /\
        AddEdge ((i, L1ViCLCreate), (i'', MemoryHierarchy), "miss", "orange")
      )
      \/
      AddEdge ((i, L1ViCLCreate), (i'', L1ViCLCreate), "miss", "orange")
    ).

% NEW: Rename L1ViCLSourceFromL2 to L1ViCLSourceFromMemoryHierarchy
% Changed L1ViCLDVISourceFromL2 to L1ViCLDVISourceFromMemoryHierarchy
DefineMacro "L1ViCLSourceFromMemoryHierarchy":
  exists microop "i'", (
    SamePhysicalAddress i i'
    /\
    SameData i i'
    /\
    AddEdge ((i', (0, MemoryHierarchy)), (i, L1ViCLCreate), "src", "blue")
    /\
    ExpandMacro L1ViCLDVISourceFromMemoryHierarchy
    /\
    (
      SameCore i i'
      \/
      ExpandMacro L1ViCLFlushOnFill
    )
  ).

% NEW: Removed ReadsFromOwnL2ViCL
% If it is going to go past the L1 it needs to directly read from MemoryHierarchy

% NEW: Removed L1ViCLSourceFromRemoteL1
% We no longer have a downgrade since we are only using one core
% and therefore we have no need for cache coherence

% NEW: Remove ExpandMacro L1ViCLSourceFromL2
% Remove implication for node exists L1ViCLDowngrade
% Also remove L1ViCLSourceFromRemoteL1
Axiom "L1ViCLs":
  forall microop "i", (
    OnCore c i =>
    IsAnyRead i =>
    ExpandMacro L1ViCLExists i =>
    (
      AddEdge ((i, L1ViCLCreate), (i, L1ViCLExpire), "path")
    )
  ).

% NEW: AtMostOneForwardingFromL1ViCL should be redundant
% we only care about one core so we do not need to care about
% data forwarding

% NEW: L2ViCLSourceInitial should be changed to L1ViCLSourceInitial?
% I believe this should be the case because we now have no L2 and thus
% move things up from L2
DefineMacro "L1ViCLSourceInitial":
  % Read occurs before all writes to same PA & Data
  DataFromInitialStateAtPA i
  /\
  forall microop "w",
  (
    IsAnyWrite w
    =>
    SamePhysicalAddress w i
    =>
    ~SameMicroop i w
    =>
    AddEdge ((i, (0, L1ViCLExpire)), (w, L1ViCLCreate), "fr", "red")
  ).

% NEW: L2ViCLSource should be changed to L1ViCLSource?
DefineMacro "L1ViCLSource":
  exists microop "i'",
  (
    SamePhysicalAddress i i'
    /\
    ~SameMicroop i i'
    /\
    SameData i i'
    /\
    AddEdges [
      ((i', (0, L1ViCLCreate)), (i , (0, L1ViCLCreate)), "src", "blue");
      ((i , (0, L1ViCLCreate)), (i', (0, L1ViCLExpire)), "DVI", "navyblue")
    ]
  ).

% NEW: L2ViCLReads should be changed to L1ViCLReads?
Axiom "L1ViCLReads":
  forall microop "i", (
    OnCore c i
    =>
    IsAnyRead i
    =>
    ExpandMacro L1ViCLExists i
    =>
    AddEdge ((i, (0, L1ViCLCreate)), (i, (0, L1ViCLExpire)), "path")
    /\
    (ExpandMacro L1ViCLSourceInitial \/ ExpandMacro L1ViCLSource)
  ).

% NEW: L2ViCLWrites should be changed to L1ViCLWrites?
% Temporarily deleted

% SWMR:
%   single writer/multiple readers(SWMR) invariant 
%   (only one writer or multiple readersper address at any time
% NEW: Changed L1ViCLDowngrade to MemoryHierarchy
% Removed the second AND 
Axiom "SWMR":
  SameCore 0 c
  =>
  forall microops "i1",
    (IsAnyWrite i1 \/ AccessType RMW i1)
    =>
    ExpandMacro L1ViCLExists i1
    =>
    forall microops "i2",
      (
        ExpandMacro L1ViCLExists i2
        =>
        (~SameMicroop i1 i2)
        =>
        (IsAnyWrite i2 \/ AccessType RMW i2)
        =>
        SamePhysicalAddress i1 i2
        =>
        (
          AddEdge ((i2, MemoryHierarchy), (i1, L1ViCLCreate), "swmr", "purple")
          \/
          AddEdge ((i1, L1ViCLCreate), (i2, L1ViCLCreate), "swmr", "purple")
        )
      ).

Axiom "L1ViCLNoDups":
  SameCore 0 c
  =>
  forall microop "i1",
    (
      (NodeExists (i1, L1ViCLCreate) \/ NodeExists (i1, L1ViCLExpire))
      =>
      forall microop "i2",
        (
          (~SameMicroop i1 i2)
          =>
          SamePhysicalAddress i1 i2
          =>
          SameCore i1 i2
          =>
          ExpandMacro L1ViCLExists i2
          =>
          (
            AddEdge ((i1, L1ViCLExpire), (i2, L1ViCLCreate), "NoDups", "orange") \/
            AddEdge ((i2, L1ViCLExpire), (i1, L1ViCLCreate), "NoDups", "orange")
          )
        )
      ).


% NEW: L2ViCLNoDups removed
