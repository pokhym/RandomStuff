set include BOOL off .

mod FAC is
  sort State .
  sort NzNat Nat .
  subsort NzNat < Nat .
  op 0 : -> Nat [ctor metadata "0"] .
  op 1 : -> NzNat [ctor metadata "1"] .
  op _+_ : Nat Nat -> Nat [ctor assoc comm id: 0 metadata "2"] .
  op _+_ : NzNat Nat -> NzNat [ctor ditto metadata "2"] .

  var N J M : Nat . var Y Z : NzNat .

  op _*_ : Nat Nat -> Nat [assoc comm metadata "3"] .
  op _*_ : NzNat NzNat -> NzNat [ditto metadata "3"] .
  eq 0 * N = 0 .
  eq 1 * N = N .
  eq N * (Y + Z) = (N * Y) + (N * Z) .

  op fac : Nat -> NzNat [metadata "4"] .
  eq fac(Y + 1) = (Y + 1) * fac(Y) .
  eq fac(1)     = 1 .
  eq fac(0)     = 1 .

  op <_,_,_> : Nat Nat Nat -> State [ctor metadata "5"] .

  rl < N , J + 1 ,           M > =>
     < N , J     , (J + 1) * M > .
endm

load ../../rltool.maude

set print attribute on .
set show advisories off .

(select FAC .)
(use tool conrew for validity         on FAC with FOFORMSIMPLIFY .)
(use tool conrew for unsatisfiability on FAC .)

(declare-vars (N:Nat) U (M:Nat) U (J:Nat) U (Y:NzNat) .)

(def-term-set (< N , 0 , M >) | true .)

(add-goal fac      : (< N , N , 1 >) | true                    => (< N , 0 , Y >) | (Y) = (fac(N)) .)
(add-goal loop-inv : (< N , J , M >) | (fac(N)) = (fac(J) * M) => (< N , 0 , Y >) | (Y) = (fac(N)) .)

(start-proof .)
(use-axioms loop-inv on 1 .)

(auto .)
(case (< N , J:Nat , M >) on J:Nat by (0) U (Z:NzNat) .)
(case 35 on &11:Nat by (0) U (W:NzNat) .)
(auto .)
(auto .)

quit
