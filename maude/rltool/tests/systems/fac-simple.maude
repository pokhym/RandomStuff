set include BOOL off .

mod FAC is
  var N J M : Nat .

  sort Zero NzNat NatRedex Nat .
  subsort Zero NzNat NatRedex < Nat .
  -----------------------------------
  op 0 : -> Zero  [ctor metadata "0"] .
  op 1 : -> NzNat [ctor metadata "1"] .

  op _+_ : NzNat    NzNat    -> NzNat    [ctor assoc comm metadata "2"] .
  op _+_ : Zero     Zero     -> NatRedex [ditto metadata "2"] .
  op _+_ : NzNat    Zero     -> NatRedex [ditto metadata "2"] .
  op _+_ : NzNat    NatRedex -> NatRedex [ditto metadata "2"] .
  op _+_ : Zero     NatRedex -> NatRedex [ditto metadata "2"] .
  op _+_ : NatRedex NatRedex -> NatRedex [ditto metadata "2"] .
  op _+_ : Nat      Nat      -> Nat      [ditto metadata "2"] .
  -------------------------------------------------------------
  eq 0 + N = N .

  op _*_ : Nat Nat -> Nat [assoc comm metadata "3"] .
  op _*_ : NzNat NzNat -> NzNat [ditto metadata "3"] .
  ----------------------------------------------------
  eq 0 * N = 0 .
  eq 1 * N = N .
  eq N * (J + M) = (N * J) + (N * M) .

  op fac : Nat -> NzNat [metadata "4"] .
  --------------------------------------
  eq fac(N + 1) = (N + 1) * fac(N) .
  eq fac(1) = 1 .
  eq fac(0) = 1 .

  sort State .
  op <_,_,_> : Nat Nat Nat -> State [ctor metadata "5"] .
  -------------------------------------------------------
  rl < N , J + 1 ,           M > =>
     < N , J     , (J + 1) * M > .
endm

load ../../rltool.maude

set print attribute on .
set show advisories off .

(select FAC .)
(use tool conrew for validity         on FAC with FOFORMSIMPLIFY .)
(use tool conrew for unsatisfiability on FAC .)

(declare-vars (N:Nat) U (M:Nat) U (J:Nat) U (Y:Nat) .)

(def-term-set (< N , 0 , M >) | true .)

(add-goal fac      : (< N , N , 1 >) | true                    => (< N , 0 , M >) | (M) = (fac(N)) .)
(add-goal loop-inv : (< N , J , M >) | (fac(N)) = (fac(J) * M) => (< N , 0 , Y >) | (Y) = (fac(N)) .)

(start-proof .)
(use-axioms loop-inv on 1 .)

(auto .)
(auto .)

quit
