load ../../systems/imp.maude

set show advisories off .
set print attribute on .

load ../../rltool.maude

(select IMP-SEMANTICS  .)
(use tool conrew for validity          on IMP-SYNTAX+MUL with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool varunif for varunif          on FVP-NAT .)
(use tool varsat  for unsatisfiability on IMP-SYNTAX .)
(def-term-set (< done | E:Env >) | true .)
(declare-vars (X:Nat) U (Y:Nat) U (S:Nat) U (X':Nat) U (S':Nat) U (MAX:Nat) .)

(add-goal loop : (< while (x <: x,,,) {x = x +: 1 ; x,, = x,, +: x, ;} ~> done
                    | x |-> X  *  x, |-> Y * x,, |-> S  * x,,, |-> MAX >) | ( INSERT LOOP INVARIANT HERE ) =>
                 (< done
		    | x |-> X' *  x, |-> Y * x,, |-> S' * x,,, |-> MAX >) | INSERT MULTIPLICATION CORRECTNESS POST-CONDITION HERE .) 
(start-proof .)

--- while(x < x,,,) {
---     x = x + 1;
---     x,, = x,, + x, ;
--- }

--- method asdf(x3: nat, x1: nat ) returns(x2: nat)
--- //  requires x3 > 0 && x1 >= 0
---   ensures x2 == x3 * x1
--- {
---   var x := 0;
---   x2 := 0;
---    while(x < x3)
---     invariant 0 <= x <= x3
---     invariant (x3 - x) * x1 + x2 == x3 * x1
---   {
---       x := x + 1;
---       x2 := x2 + x1;
---   }
  
--- //  ret := x2;
--- }
