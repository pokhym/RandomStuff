--- runs AC/ACU congruence closure tests

load ../test-cc.maude

set include BOOL off .

fmod U is
  sort U .
  op e : -> U [ctor metadata "1"] .
  op 0 : -> U [ctor metadata "2"] .
  op 1 : -> U [ctor metadata "3"] .
  op a : -> U [ctor metadata "4"] .
  op b : -> U [ctor metadata "5"] .
  op c : -> U [ctor metadata "6"] .
  op d : -> U [ctor metadata "7"] .
  op a' : -> U [ctor metadata "8"] .
  op b' : -> U [ctor metadata "9"] .
  op c' : -> U [ctor metadata "10"] .
  op z  : -> U [ctor metadata "11"] .
  op __ : U U -> U [assoc metadata "12"] .       *** implicitly, id: e
  op s  : U -> U [ctor metadata "13"] .
  op i  : U -> U [ctor metadata "14"] .
  op _+_ : U U -> U [assoc comm metadata "16"] . *** implicitly, id: 0
  op _*_ : U U -> U [assoc comm metadata "17"] . *** implicitly, id: 1
endfm

fmod U-ID is
  sort U .
  op e : -> U [ctor metadata "1"] .
  op 0 : -> U [ctor metadata "2"] .
  op 1 : -> U [ctor metadata "3"] .
  op a : -> U [ctor metadata "4"] .
  op b : -> U [ctor metadata "5"] .
  op c : -> U [ctor metadata "6"] .
  op d : -> U [ctor metadata "7"] .
  op a' : -> U [ctor metadata "8"] .
  op b' : -> U [ctor metadata "9"] .
  op c' : -> U [ctor metadata "10"] .
  op z  : -> U [ctor metadata "11"] .
  op __ : U U -> U [assoc metadata "12 e.U"] .       *** implicitly, id: e
  op s  : U -> U [ctor metadata "13"] .
  op i  : U -> U [ctor metadata "14"] .
  op _+_ : U U -> U [assoc comm metadata "16 0.U"] . *** implicitly, id: 0
  op _*_ : U U -> U [assoc comm metadata "17 1.U"] . *** implicitly, id: 1

  var X : U .
  eq e X   = X [metadata "id "] .
  eq X e   = X [metadata "id "] .
  eq X + 0 = X [metadata "id "] .
  eq X * 1 = X [metadata "id "] .
endfm

fmod TEST-ARGS is
  pr CONG-CLOSURE-LIB .
  op test-mod : -> Module .
  eq test-mod = upModule('U,true) .
  op test-mod-id : -> Module .
  eq test-mod-id = upModule('U-ID,true) .
endfm

set show timing off .

--- FIXME: this test is currently broken
red init-ac-cc(test-mod,
  make-rule(test-mod,'_+_['a.U,'b.U],'c.U) make-rule(test-mod,'_+_['a.U,'d.U],'e.U)
) .
---(
([eq '_+_['a.U,'b.U] = 'c.U [metadata("1")] .
eq '_+_['a.U,'d.U] = 'e.U [metadata("2")] .
eq '_+_['e.U,'b.U] = '_+_['c.U,'d.U] [metadata("3")] .,2,nil]) .
---)

--- Let us also see how, with identities, the treatment of groups and monoids becomes quite simplified:
---
--- Proof that the theory of commutative groups satisfies the cancellation law: (x + y = x + z => y = z).
--- Negated gives us: x + y = x + z /\ y =/= z .
---
--- Let x' denote the inverse of x in the group.
---
--- Can prove this theorem by:
--- [i] mapping: x -> a, y -> b, z -> c,
--- [ii] forming congruence closure on the equations corresponding to x + y = x + z plus inverses plus identity axioms:
---
--- [*] (a + b ~ a + c) @ (a + a' ~ 0) @ (b + b' ~ 0) @ (c + c' ~ 0) .
---
--- [iii] checking that the disequality b =/= c is unsatisfiable in that congruence closure, as shown by the second returned rule "5":
red init-ac-cc(test-mod,
make-rule(test-mod, '_+_['a.U,'b.U ], '_+_['a.U,'c.U])
make-rule(test-mod, '_+_['a.U,'a'.U], 'e.U)
make-rule(test-mod, '_+_['b.U,'b'.U], 'e.U)
make-rule(test-mod, '_+_['c.U,'c'.U], 'e.U)
make-rule(test-mod, '_+_['e.U,'e.U ], 'e.U)
make-rule(test-mod, '_+_['e.U,'a.U ], 'a.U)
make-rule(test-mod, '_+_['e.U,'a'.U], 'a'.U)
make-rule(test-mod, '_+_['e.U,'b.U ], 'b.U)
make-rule(test-mod, '_+_['e.U,'b'.U], 'b'.U)
make-rule(test-mod, '_+_['e.U,'c.U ], 'c.U)
make-rule(test-mod, '_+_['e.U,'c'.U], 'c'.U)
)
state-equality
([eq 'c'.U = 'b'.U [metadata("14")] .
eq 'c.U = 'b.U [metadata("12")] .
eq '_+_['a.U,'a'.U] = 'e.U [metadata("8")] .
eq '_+_['b.U,'b'.U] = 'e.U [metadata("9")] .
eq '_+_['e.U,'a'.U] = 'a'.U [metadata("5")] .
eq '_+_['e.U,'a.U] = 'a.U [metadata("2")] .
eq '_+_['e.U,'b'.U] = 'b'.U [metadata("6")] .
eq '_+_['e.U,'b.U] = 'b.U [metadata("3")] .
eq '_+_['e.U,'e.U] = 'e.U [metadata("1")] .,3,nil]) .

red init-acu-cc(test-mod,getTaggedIdEqs(test-mod-id),ccModData(test-mod-id),
make-rule(test-mod,'_+_['a.U,'b.U ],'_+_['a.U,'c.U])
make-rule(test-mod,'_+_['a.U,'a'.U],'0.U)
make-rule(test-mod,'_+_['b.U,'b'.U],'0.U)
make-rule(test-mod,'_+_['c.U,'c'.U],'0.U)
)
state-equality
([eq 'c'.U = 'b'.U [metadata("7")] .
eq 'c.U = 'b.U [metadata("5")] .
eq '_*_['1.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '_+_['a.U,'a'.U] = '0.U [metadata("1")] .
eq '_+_['b.U,'b'.U] = '0.U [metadata("2")] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['e.U,'X:U] = 'X:U [none] .,3,nil]) .

--- Instead, the cancellation law: (x + y = x + z => y = z) does NOT hold for commutative monoids.  This is proved by showing that the
--- disequality b =/= c is SATISFIABLE in the congruence closure where existence of inverses is not assumed:
---
--- [*] (a + b ~ a + c) .
---
--- since b and c are irreducible by the congruence closure rules:
---
red init-ac-cc(test-mod,
make-rule(test-mod,'_+_['a.U,'b.U],'_+_['a.U,'c.U])
make-rule(test-mod,'_+_['e.U,'e.U],'e.U)
make-rule(test-mod,'_+_['e.U,'a.U],'a.U)
make-rule(test-mod,'_+_['e.U,'b.U],'b.U)
make-rule(test-mod,'_+_['e.U,'c.U],'c.U)
)
state-equality
([eq '_+_['a.U,'c.U] = '_+_['a.U,'b.U] [metadata("5")] .
eq '_+_['e.U,'a.U] = 'a.U [metadata("2")] .
eq '_+_['e.U,'b.U] = 'b.U [metadata("3")] .
eq '_+_['e.U,'c.U] = 'c.U [metadata("4")] .
eq '_+_['e.U,'e.U] = 'e.U [metadata("1")] .,1,nil]) .

red init-acu-cc(test-mod,getTaggedIdEqs(test-mod-id),ccModData(test-mod-id),
make-rule(test-mod,'_+_['a.U,'b.U],'_+_['a.U,'c.U])
)
state-equality
([eq '_*_['1.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '_+_['a.U,'c.U] = '_+_['a.U,'b.U] [metadata("1")] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['e.U,'X:U] = 'X:U [none] .,1,nil]) .

--- We can also prove the cancellation law  (x y = x z => y = z) for groups by computing the congruence closure of:
---
--- [*] (a b ~ a c) @ (a a' ~ e) @ (a' a ~ e) @ (b b' ~ e) @ (b' b ~ e) @ (c c' ~ e) @ (c' c ~ e) .
---
--- so that the second rule in the result lists below shows that b =/= c unsatisfiable.
---
red init-ac-cc(test-mod,
make-rule(test-mod,'__['a.U,  'b.U ], '__['a.U,'c.U])
make-rule(test-mod,'__['a.U,  'a'.U], 'e.U )
make-rule(test-mod,'__['a'.U, 'a.U ], 'e.U )
make-rule(test-mod,'__['b.U,  'b'.U], 'e.U )
make-rule(test-mod,'__['b'.U, 'b.U ], 'e.U )
make-rule(test-mod,'__['c.U,  'c'.U], 'e.U )
make-rule(test-mod,'__['c'.U, 'c.U ], 'e.U )
make-rule(test-mod,'__['e.U,  'e.U ], 'e.U )
make-rule(test-mod,'__['e.U,  'a.U ], 'a.U )
make-rule(test-mod,'__['a.U,  'e.U ], 'a.U )
make-rule(test-mod,'__['e.U,  'a'.U], 'a'.U)
make-rule(test-mod,'__['a'.U, 'e.U ], 'a'.U)
make-rule(test-mod,'__['e.U,  'b.U ], 'b.U )
make-rule(test-mod,'__['b.U,  'e.U ], 'b.U )
make-rule(test-mod,'__['e.U,  'b'.U], 'b'.U)
make-rule(test-mod,'__['b'.U, 'e.U ], 'b'.U)
make-rule(test-mod,'__['e.U,  'c.U ], 'c.U )
make-rule(test-mod,'__['c.U,  'e.U ], 'c.U )
make-rule(test-mod,'__['e.U,  'c'.U], 'c'.U)
make-rule(test-mod,'__['c'.U, 'e.U ], 'c'.U)
)
state-equality
([eq 'c'.U = 'b'.U [metadata("25")] .
eq 'c.U = 'b.U [metadata("22")] .
eq '__['a'.U,'a.U] = 'e.U [metadata("15")] .
eq '__['a'.U,'e.U] = 'a'.U [metadata("14")] .
eq '__['a.U,'a'.U] = 'e.U [metadata("9")] .
eq '__['a.U,'e.U] = 'a.U [metadata("8")] .
eq '__['b'.U,'b.U] = 'e.U [metadata("17")] .
eq '__['b'.U,'e.U] = 'b'.U [metadata("16")] .
eq '__['b.U,'b'.U] = 'e.U [metadata("11")] .
eq '__['b.U,'e.U] = 'b.U [metadata("10")] .
eq '__['e.U,'a'.U] = 'a'.U [metadata("5")] .
eq '__['e.U,'a.U] = 'a.U [metadata("2")] .
eq '__['e.U,'b'.U] = 'b'.U [metadata("6")] .
eq '__['e.U,'b.U] = 'b.U [metadata("3")] .
eq '__['e.U,'e.U] = 'e.U [metadata("1")] .,3,nil]) .

---(
red init-acu-cc(test-mod,id:eqs(X),id:set,upTerm(
 (a b  ~ a c) @ (a  a' ~ e ) @ (a' a ~ e) @ (b b' ~ e ) @ (b' b  ~ e ) @ (c  c' ~ e ) @ (c' c ~ e)))
==
([eq 'c'.U = 'b'.U [metadata("12")] .
eq 'c.U = 'b.U [metadata("9")] .
eq '_*_['1.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['a'.U,'a.U] = 'e.U [metadata("4")] .
eq '__['a.U,'a'.U] = 'e.U [metadata("1")] .
eq '__['b'.U,'b.U] = 'e.U [metadata("5")] .
eq '__['b.U,'b'.U] = 'e.U [metadata("2")] .
eq '__['e.U,'X:U] = 'X:U [none] .
eq '_|_['e.U,'X:U] = 'X:U [none] .,3,'mt.EqSet]) .

--- Can finally show that the cancellation law  (x y = x z => y = z) does NOT hold for monoids by using equation:
---
--- [*] (a b ~ a c) .
---
--- and showing that both b and c are irreducible by the resulting rules below,
--- so that the initial model defined by these rules (disregarding all other operators in the module U) provides a COUNTREXAMPLE of a non-cancellative monoid.
---
red init-ac-cc(test-mod,upTerm(
 (a b ~ a c) @ (e e ~ e) @ (e a ~ a) @ (a e ~ a) @ (e b ~ b) @ (b e ~ b) @ (e c ~ c) @ (c e ~ c)))
==
([eq '__['a.U,'c.U] = '__['a.U,'b.U] [metadata("8")] .
eq '__['a.U,'e.U] = 'a.U [metadata("5")] .
eq '__['b.U,'e.U] = 'b.U [metadata("6")] .
eq '__['c.U,'e.U] = 'c.U [metadata("7")] .
eq '__['e.U,'a.U] = 'a.U [metadata("2")] .
eq '__['e.U,'b.U] = 'b.U [metadata("3")] .
eq '__['e.U,'c.U] = 'c.U [metadata("4")] .
eq '__['e.U,'e.U] = 'e.U [metadata("1")] .,1,'mt.EqSet]) .

red init-acu-cc(test-mod,id:eqs(X),id:set,upTerm(a b ~ a c))
==
([eq '_*_['1.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['a.U,'c.U] = '__['a.U,'b.U] [metadata("1")] .
eq '__['e.U,'X:U] = 'X:U [none] .
eq '_|_['e.U,'X:U] = 'X:U [none] .,1,'mt.EqSet]) .

--- We can also apply this method to get a decision procedure for the theory of idempotent commutative monoids by adding equations x + x ~ x for each generator.
--- In particular, we can prove that any idempotent commutative group is trivial (i.e., satisfies x = 0) by verifying the unsatisfiability of x =/= 0
--- in the congruence closure of the equations specifying the free idempotent group on one generator:
---
red init-ac-cc(test-mod,upTerm(
 (a + a ~ a) @ (a' + a' ~ a') @ (a + a' ~ 0) @ (0 + 0 ~ 0) @ (0 + a ~ a) @ (0 + a' ~ a')))
==
([eq 'a'.U = '0.U [metadata("8")] .
eq 'a.U = '0.U [metadata("7")] .
eq '_+_['0.U,'0.U] = '0.U [metadata("1")] .,2,'mt.EqSet]) .

red init-acu-cc(test-mod,id:eqs(X),id:set,upTerm(
 (a + a ~ a) @ (a' + a' ~ a') @ (a + a' ~ 0)))
==
([eq 'a'.U = '0.U [metadata("5")] .
eq 'a.U = '0.U [metadata("4")] .
eq '_*_['1.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['e.U,'X:U] = 'X:U [none] .
eq '_|_['e.U,'X:U] = 'X:U [none] .,2,'mt.EqSet]) .

--- Although, the free idempotent semigroup on three generators has infinite cardinality, the free idempotent semigroup on TWO generators
--- does have cardinality four and can be specified with a finite number of ground rewrite rules. Therefore, although the above method does
--- not extend to a decision procedure for idempotent semigroups, we can nevertheless still prove that all idempotent groups are trivial
--- by verifying that x =/= e is unsatisfiable in the congruence closure of the following equations, which specify the free idempotent
--- group on one generator (two generators as a monoid):
---
red init-ac-cc(test-mod,upTerm(
 (a a ~ a) @ (a' a' ~ a') @ (e e ~ e) @ (e a ~ a) @ (a e ~ a) @ (e a' ~ a') @ (a' e ~ a') @ (a a' ~ e) @ (a' a ~ e)))
==
([eq 'a'.U = 'e.U [metadata("11")] .
eq 'a.U = 'e.U [metadata("10")] .
eq '__['e.U,'e.U] = 'e.U [metadata("1")] .,2,'mt.EqSet]) .

red init-acu-cc(test-mod,id:eqs(X),id:set,upTerm(
 (a a ~ a) @ (a' a' ~ a') @ (a a' ~ e) @ (a' a ~ e)))
==
([eq 'a'.U = 'e.U [metadata("6")] .
eq 'a.U = 'e.U [metadata("5")] .
eq '_*_['1.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['e.U,'X:U] = 'X:U [none] .
eq '_|_['e.U,'X:U] = 'X:U [none] .,2,'mt.EqSet]) .

--- FIXME: the metadata("1") equation below has metadata("2") in Jose's original code --- why?
--- The following problem presents a commutative (+) group with generators 0,1,e where 1' = a and e' = b and imposes the single equation e + 0 = e + 1,
--- which must have the effect consequence 1 = 0 because of the cancellation law, and 1 = a, because 0 = 1 = 1 + a = 0 + a = a = 1 = 0 .
--- Note also that since we have the rule 1 = 0, the identity rules have been normalized with that rule, so that 1 * X = X now becomes 0 * X = X.
---
red init-acu-cc(test-mod,id:eqs(X),id:set,upTerm(
 (1 + a ~ 0) @ (e + b ~ 0) @  (e + 0 ~ e + 1)))
==
([eq '1.U = '0.U [metadata("4")] .
eq 'a.U = '0.U [metadata("5")] .
eq '_*_['0.U,'X:U] = 'X:U [none] .
eq '_+_['0.U,'X:U] = 'X:U [none] .
eq '_+_['e.U,'b.U] = '0.U [metadata("1")] .
eq '__['X:U,'e.U] = 'X:U [none] .
eq '__['e.U,'X:U] = 'X:U [none] .
eq '_|_['e.U,'X:U] = 'X:U [none] .,2,'mt.EqSet]) .
---)
