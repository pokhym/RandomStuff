set include BOOL off .

fmod FVP-NAT is
  sort Bool .
  op true  : -> Bool [ctor metadata "0"] .
  op false : -> Bool [ctor metadata "1"] .

  sort Nat NzNat .
  subsort NzNat < Nat .
  op 0 : -> Nat   [ctor metadata "2"] .
  op 1 : -> NzNat [ctor metadata "3"] .
  op _+_ : Nat Nat   ->   Nat [ctor assoc comm id: 0 metadata "4"] .
  op _+_ : NzNat Nat -> NzNat [ctor ditto            metadata "4"] .

  var N M : Nat .
  var Z   : NzNat .

  op _monus_ : Nat Nat -> Nat [metadata "5"] .
  eq  N      monus (N + M) = 0 [variant] .
  eq (N + Z) monus  N      = Z [variant] .

  op _<=_ : Nat Nat -> Bool [metadata "6"] .
  eq N     <= N + M = true  [variant] .
  eq N + Z <= N     = false [variant] .
endfm

mod BANK-ACCOUNT is
  pr FVP-NAT .

  sorts Msg MsgConf .
  subsort Msg < MsgConf .

  op withdraw : Nat -> Msg [ctor metadata "7"] .
  op mt       : -> MsgConf [ctor metadata "8"] .
  op _,_ : MsgConf MsgConf -> MsgConf [ctor assoc comm id: mt metadata "9"] .
  ---------------------------------------------------------------------------

  sort Account .

  op < bal:_pend:_overdraft:_> : Nat Nat Bool -> Account [ctor metadata "10"] .
  -----------------------------------------------------------------------------

  sorts State .

  op _#_ : Account MsgConf -> State [ctor metadata "11"] .
  --------------------------------------------------------

  vars n m x : Nat . var p : NzNat . var msgs : MsgConf .

  *** requesting to draw money having sufficient funds; the amount requested is
  *** added to the amount of pending withdraw requests
  rl [mark-withdrawal] :
     < bal: n + m + x pend: x     overdraft: false > #               msgs
  => < bal: n + m + x pend: x + m overdraft: false > # withdraw(m) , msgs .

  rl [overdraft] :
     < bal: n pend: x              overdraft: false > # withdraw(n + p) , msgs
  => < bal: 0 pend: x monus n + p  overdraft: true  > # msgs .

  rl [withdraw] :
     < bal: n + m pend: x          overdraft: false > # withdraw(m) , msgs
  => < bal: n     pend: x monus m  overdraft: false > # msgs .

  *** more money can at any time be deposited in the account if it is not in overdraft
  rl [deposit] :
     < bal: n     pend: x overdraft: false > # msgs
  => < bal: n + m pend: x overdraft: false > # msgs [nonexec] .
endm

mod BANK-ACCOUNT-DEFINEDOPS is
  protecting BANK-ACCOUNT .

  var K : NzNat . var N M : Nat . var MSGS : MsgConf .

  --- idea that will work:
  --- split up MsgConf into two mutually exclusive sorts
  --- [1] the sort of confs that add up to zero
  --- [2] the sort of confs that add up to a nonzero num
  --- [3] subsort the debts function in each case
  --- [4] add an equation that makes the debts function
  ---     zero in the zero conf case
  --- [5] add the equations below but replacing the N
  ---     with a NzNat
  --- Finally, in the middle of the proof, do a case
  --- analysis on the MsgConf variable


  op debts : MsgConf -> Nat [metadata "13"] .
  -------------------------------------------
  eq debts(mt)                 = 0 .
  eq debts(withdraw(N) , MSGS) = N + debts(MSGS) .

  eq K + N <= K + M = N <= M .
  eq K + N <= 0     = N <= 0 .
endm

mod BANK-ACCOUNT-stop is
  pr BANK-ACCOUNT-DEFINEDOPS .
  op [_,_] : Account MsgConf -> State [ctor metadata "12"] .
  rl [stop] : A:Account # M:MsgConf => [A:Account,M:MsgConf] .
endm
